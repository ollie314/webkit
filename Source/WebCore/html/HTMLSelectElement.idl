/*
 * Copyright (C) 2006, 2010 Apple Inc. All rights reserved.
 * Copyright (C) 2006 Samuel Weinig <sam.weinig@gmail.com>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public License
 * along with this library; see the file COPYING.LIB.  If not, write to
 * the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
 * Boston, MA 02110-1301, USA.
 */

[
    CustomIndexedSetter,
    ExportMacro=WEBCORE_EXPORT,
    JSGenerateToNativeObject,
] interface HTMLSelectElement : HTMLElement {
    [Reflect] attribute boolean autofocus;
    [Reflect] attribute boolean disabled;
    readonly attribute HTMLFormElement? form;
    attribute boolean multiple;
    [Reflect] attribute DOMString name;
    [Reflect] attribute boolean required;

    attribute unsigned long size;

    readonly attribute DOMString type;

    readonly attribute HTMLOptionsCollection options;
    [SetterRaisesException] attribute unsigned long length;

    getter HTMLOptionElement? item(unsigned long index);
    HTMLOptionElement? namedItem(DOMString name);

    [RaisesException] void add(HTMLElement element, optional HTMLElement? before = null);
    // FIXME: Should be:
    // void add((HTMLOptionElement or HTMLOptGroupElement) element, optional (HTMLElement or long)? before = null);
    [RaisesException] void add(HTMLElement element, long index);

    [RaisesException] void remove(); // ChildNode overload
    // FIXME: This overload is not in the specification and was dropped in Blink.
    void remove(HTMLOptionElement option);
    [ImplementedAs=removeByIndex] void remove(long index);

    readonly attribute HTMLCollection selectedOptions;
    attribute long selectedIndex;

    attribute DOMString value;

    readonly attribute boolean willValidate;
    readonly attribute ValidityState validity;
    readonly attribute DOMString validationMessage;
    boolean checkValidity();
    void setCustomValidity(DOMString? error); // FIXME: Argument should not be nullable.

    readonly attribute NodeList labels;

    attribute DOMString autocomplete;
};
