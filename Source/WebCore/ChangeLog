2016-09-28  Chris Dumez  <cdumez@apple.com>

        Drop first 'state' parameter to JSDOMWindow::toWrapped() / JSEventTarget::toWrapped()
        https://bugs.webkit.org/show_bug.cgi?id=162709

        Reviewed by Alex Christensen.

        Drop first 'state' parameter to JSDOMWindow::toWrapped() / JSEventTarget::toWrapped()
        as it is unused. This is the quickest way to allow DOMWindow / EventTarget members
        in IDL dictionaries. This is because the generated bindings code relies on
        convertWrapperType() in JSDOMConvert.h which calls toWrapped() with a single
        parameter. Right now, the only type that requires an ExecState for its toWrapped()
        is XPathNSResolver (which should likely be a callback interface rather than a
        regular interface).

        * bindings/js/JSDOMWindowCustom.cpp:
        (WebCore::JSDOMWindow::toWrapped):
        * bindings/js/JSDictionary.cpp:
        (WebCore::JSDictionary::convertValue):
        * bindings/js/JSEventTargetCustom.cpp:
        (WebCore::JSEventTarget::toWrapped):
        * bindings/js/JSMessageEventCustom.cpp:
        (WebCore::handleInitMessageEvent):
        * bindings/scripts/CodeGeneratorJS.pm:
        (GenerateHeader):
        (JSValueToNative):

2016-09-28  Chris Dumez  <cdumez@apple.com>

        Log console messages when the anchor download attribute is ignored
        https://bugs.webkit.org/show_bug.cgi?id=162703

        Reviewed by Alex Christensen.

        Log console messages when the anchor download attribute is ignored so
        that the developer can better understand what's happening.

        No new tests, rebaselined existing tests.

        * html/HTMLAnchorElement.cpp:
        (WebCore::HTMLAnchorElement::handleClick):

2016-09-28  Chris Dumez  <cdumez@apple.com>

        Add support for DOMTokenList.supports()
        https://bugs.webkit.org/show_bug.cgi?id=162659

        Reviewed by Ryosuke Niwa.

        Add support for DOMTokenList.supports():
        - https://dom.spec.whatwg.org/#dom-domtokenlist-supports

        Firefox and Chrome already recently implemented it (Chrome since
        version 50 and Firefox since version 49).

        Test: fast/dom/DOMTokenList-supports.html

        * dom/SecurityContext.cpp:
        (WebCore::SecurityContext::isSupportedSandboxPolicy):
        (WebCore::SecurityContext::enforceSandboxFlags): Deleted.
        * dom/SecurityContext.h:
        * html/DOMTokenList.cpp:
        (WebCore::DOMTokenList::DOMTokenList):
        (WebCore::DOMTokenList::supports):
        (WebCore::DOMTokenList::replace): Deleted.
        * html/DOMTokenList.h:
        (WebCore::DOMTokenList::DOMTokenList):
        * html/DOMTokenList.idl:
        * html/HTMLAnchorElement.cpp:
        (WebCore::HTMLAnchorElement::parseAttribute):
        (WebCore::HTMLAnchorElement::relList):
        * html/HTMLAnchorElement.idl:
        * html/HTMLAreaElement.idl:
        * html/HTMLIFrameElement.cpp:
        (WebCore::HTMLIFrameElement::sandbox):
        * html/HTMLLinkElement.cpp:
        (WebCore::HTMLLinkElement::relList):
        * html/HTMLTableCellElement.idl:
        * html/LinkRelAttribute.cpp:
        (WebCore::LinkRelAttribute::isSupported):
        (WebCore::LinkRelAttribute::LinkRelAttribute): Deleted.
        * html/LinkRelAttribute.h:

2016-09-28  Ryosuke Niwa  <rniwa@webkit.org>

        DOMTokenListâ€™s value and stringifier should not return parsed tokens
        https://bugs.webkit.org/show_bug.cgi?id=161076

        Reviewed by Chris Dumez.

        Updated our implementation of DOMTokenList.prototype.value and its toString function
        to match the latest DOM specification: https://dom.spec.whatwg.org/#interface-domtokenlist

        "value" attribute, on getting, runs its serialize steps, which simply gets the attribute value.
        On setting, it sets the attribute value with the given value.

        The stringification behavior returns the same serialize steps as "value" attribute on getting.

        This change simplifies our implementation of DOMTokenList and removes the need for m_cachedValue,
        which has been removed in this patch.

        No new tests since existing tests cover this.

        * html/DOMTokenList.cpp:
        (WebCore::DOMTokenList::value): Just call getAttribute.
        (WebCore::DOMTokenList::setValue): Just call setAttribute.
        (WebCore::DOMTokenList::updateTokensFromAttributeValue):
        (WebCore::DOMTokenList::associatedAttributeValueChanged):
        (WebCore::DOMTokenList::updateAssociatedAttributeFromTokens): Moved the code to update the tokens
        from from the attribute value. This is the "update steps".
        * html/DOMTokenList.h:

2016-09-28  Jer Noble  <jer.noble@apple.com>

        CRASH at WebCore::CDMSessionAVStreamSession::update + 950
        https://bugs.webkit.org/show_bug.cgi?id=162701

        Reviewed by Beth Dakin.

        If the SourceBuffer backing a <video> element is removed before CDMSessionAVStreamSession::update() gets
        a chance to run, the protectedSourceBuffer will be null. Just bail early and indicate an error.

        * platform/graphics/avfoundation/objc/CDMSessionAVStreamSession.mm:
        (WebCore::CDMSessionAVStreamSession::update):

2016-09-28  Alex Christensen  <achristensen@webkit.org>

        URLParser should properly handle unexpected periods and overflows in IPv4 addresses
        https://bugs.webkit.org/show_bug.cgi?id=162655

        Reviewed by Geoffrey Garen.

        Covered by new API tests.

        * platform/URLParser.cpp:
        (WebCore::URLParser::parseIPv4Number):
        (WebCore::URLParser::parseIPv4Host):
        * platform/URLParser.h:

2016-09-28  Wenson Hsieh  <wenson_hsieh@apple.com>

        Some media tests are crashing due to soft-linking failures
        https://bugs.webkit.org/show_bug.cgi?id=162698

        Reviewed by Jer Noble.

        We should be handling soft-linking failures for MRMediaRemoteSetNowPlayingVisibility gracefully. Guards these
        calls with canLoad_MediaRemote_MRMediaRemoteSetParentApplication and also use the
        SOFT_LINK_FUNCTION_MAY_FAIL_FOR_HEADER macro when soft linking.

        * platform/audio/mac/MediaSessionManagerMac.mm:
        (WebCore::MediaSessionManagerMac::updateNowPlayingInfo):
        * platform/mac/MediaRemoteSoftLink.cpp:
        * platform/mac/MediaRemoteSoftLink.h:

2016-09-28  Alex Christensen  <achristensen@webkit.org>

        URLParser should ignore tabs in authority
        https://bugs.webkit.org/show_bug.cgi?id=162694

        Reviewed by Geoffrey Garen.

        Covered by new API tests.

        * platform/URLParser.cpp:
        (WebCore::URLParser::parseAuthority):

2016-09-28  Alex Christensen  <achristensen@webkit.org>

        URLParser should ignore extra slashes after scheme:// and handle a missing slash after the port
        https://bugs.webkit.org/show_bug.cgi?id=162690

        Reviewed by Geoffrey Garen.

        Covered by new API tests.

        * platform/URLParser.cpp:
        (WebCore::URLParser::parse):

2016-09-28  Alex Christensen  <achristensen@webkit.org>

        URLParser should correctly canonicalize uppercase IPv6 addresses
        https://bugs.webkit.org/show_bug.cgi?id=162680

        Reviewed by Tim Horton.

        Covered by a new API test.

        * platform/URLParser.cpp:
        (WebCore::URLParser::parseIPv6Host):
        If there is an uppercase character in the IPv6 address part, then it is a syntax violation
        because the canonicalized IPv6 address differs from the input String.

2016-09-28  Chris Dumez  <cdumez@apple.com>

        Unreviewed, fix iOS build.

        * bindings/js/ios/TouchConstructors.cpp:

2016-09-28  Chris Dumez  <cdumez@apple.com>

        It should be possible to dispatch events on template documents
        https://bugs.webkit.org/show_bug.cgi?id=162687

        Reviewed by Ryosuke Niwa.

        It should be possible to dispatch events on template documents. Firefox
        supports this. Chrome does not but this is likely not intentional as
        Chrome generally supports dispatching events on frameless documents.

        Test: fast/dom/template-document-dispatchEvent.html

        * dom/Document.cpp:
        (WebCore::Document::ensureTemplateDocument):

2016-09-27  Dean Jackson  <dino@apple.com>

        Use Color references where possible
        https://bugs.webkit.org/show_bug.cgi?id=162643
        <rdar://problem/28506550>

        Reviewed by Simon Fraser.

        There were a bunch of places where we pass or use
        Colors by value. As the Color class gets a bit more
        complicated, it would be nice to avoid copying, so
        use references where possible.

        * css/CSSGradientValue.cpp:
        (WebCore::interpolate):
        * css/StyleColor.h:
        (WebCore::StyleColor::getColor):
        (WebCore::StyleColor::resolve):
        * css/StyleResolver.h:
        (WebCore::StyleResolver::State::backgroundColor):
        * dom/Document.h:
        (WebCore::Document::textColor):
        * editing/FrameSelection.cpp:
        (WebCore::disappearsIntoBackground):
        * html/canvas/CanvasRenderingContext2D.cpp:
        (WebCore::CanvasRenderingContext2D::setShadow):
        * html/canvas/CanvasRenderingContext2D.h:
        * html/track/TextTrackCueGeneric.h:
        * page/PageOverlay.cpp:
        (WebCore::PageOverlay::setBackgroundColor):
        * page/PageOverlay.h:
        * page/animation/CSSPropertyAnimation.cpp:
        (WebCore::PropertyWrapperColor::PropertyWrapperColor):
        (WebCore::PropertyWrapperMaybeInvalidColor::PropertyWrapperMaybeInvalidColor):
        (WebCore::PropertyWrapperVisitedAffectedColor::PropertyWrapperVisitedAffectedColor):
        * platform/graphics/GraphicsContext.cpp:
        (WebCore::GraphicsContext::fillRectWithRoundedHole):
        * platform/graphics/GraphicsContext.h:
        (WebCore::GraphicsContext::strokeColor):
        (WebCore::GraphicsContext::fillColor):
        * platform/graphics/InbandTextTrackPrivateClient.h:
        (WebCore::GenericCueData::foregroundColor):
        (WebCore::GenericCueData::setForegroundColor):
        (WebCore::GenericCueData::backgroundColor):
        (WebCore::GenericCueData::setBackgroundColor):
        (WebCore::GenericCueData::highlightColor):
        (WebCore::GenericCueData::setHighlightColor):
        * platform/graphics/ca/TileController.h:
        * platform/graphics/cg/GraphicsContextCG.cpp:
        (WebCore::GraphicsContext::drawRect):
        (WebCore::GraphicsContext::fillRect):
        (WebCore::GraphicsContext::platformFillRoundedRect):
        (WebCore::GraphicsContext::fillRectWithRoundedHole):
        * platform/graphics/displaylists/DisplayListItems.h:
        (WebCore::DisplayList::DrawFocusRingPath::color):
        (WebCore::DisplayList::DrawFocusRingRects::color):
        (WebCore::DisplayList::FillRectWithColor::color):
        (WebCore::DisplayList::FillCompositedRect::color):
        (WebCore::DisplayList::FillRoundedRect::color):
        (WebCore::DisplayList::FillRectWithRoundedHole::color):
        * platform/graphics/filters/FEDiffuseLighting.cpp:
        (WebCore::FEDiffuseLighting::lightingColor):
        * platform/graphics/filters/FEDiffuseLighting.h:
        * platform/graphics/filters/FEDropShadow.h:
        (WebCore::FEDropShadow::shadowColor):
        * platform/graphics/filters/FEFlood.cpp:
        (WebCore::FEFlood::floodColor):
        (WebCore::FEFlood::platformApplySoftware):
        * platform/graphics/filters/FEFlood.h:
        * platform/graphics/filters/FESpecularLighting.cpp:
        (WebCore::FESpecularLighting::lightingColor):
        * platform/graphics/filters/FESpecularLighting.h:
        * platform/graphics/filters/FilterOperation.h:
        * rendering/BorderEdge.h:
        (WebCore::BorderEdge::color):
        * rendering/InlineFlowBox.cpp:
        (WebCore::InlineFlowBox::paintBoxDecorations):
        * rendering/InlineTextBox.cpp:
        (WebCore::InlineTextBox::paintSelection):
        * rendering/InlineTextBox.h:
        * rendering/RenderFrameSet.cpp:
        (WebCore::borderStartEdgeColor):
        (WebCore::borderEndEdgeColor):
        (WebCore::borderFillColor):
        * rendering/RenderInline.cpp:
        (WebCore::RenderInline::paintOutlineForLine):
        * rendering/RenderInline.h:
        * rendering/RenderLayerCompositor.h:
        * rendering/RenderView.cpp:
        (WebCore::RenderView::paintBoxDecorations):
        * rendering/TextDecorationPainter.cpp:
        (WebCore::TextDecorationPainter::paintTextDecoration):
        * rendering/TextPainter.cpp:
        (WebCore::TextPainter::paintTextWithShadows):
        * rendering/style/BorderValue.h:
        (WebCore::BorderValue::color):
        * rendering/style/CollapsedBorderValue.h:
        (WebCore::CollapsedBorderValue::color):
        * rendering/style/RenderStyle.cpp:
        (WebCore::RenderStyle::color):
        (WebCore::RenderStyle::visitedLinkColor):
        (WebCore::RenderStyle::setColor):
        (WebCore::RenderStyle::setVisitedLinkColor):
        * rendering/style/RenderStyle.h:
        (WebCore::RenderStyle::borderLeftColor):
        (WebCore::RenderStyle::borderRightColor):
        (WebCore::RenderStyle::borderTopColor):
        (WebCore::RenderStyle::borderBottomColor):
        (WebCore::RenderStyle::backgroundColor):
        (WebCore::RenderStyle::columnRuleColor):
        (WebCore::RenderStyle::outlineColor):
        (WebCore::RenderStyle::textEmphasisColor):
        (WebCore::RenderStyle::textFillColor):
        (WebCore::RenderStyle::textStrokeColor):
        (WebCore::RenderStyle::visitedLinkBackgroundColor):
        (WebCore::RenderStyle::visitedLinkBorderLeftColor):
        (WebCore::RenderStyle::visitedLinkBorderRightColor):
        (WebCore::RenderStyle::visitedLinkBorderBottomColor):
        (WebCore::RenderStyle::visitedLinkBorderTopColor):
        (WebCore::RenderStyle::visitedLinkOutlineColor):
        (WebCore::RenderStyle::visitedLinkColumnRuleColor):
        (WebCore::RenderStyle::textDecorationColor):
        (WebCore::RenderStyle::visitedLinkTextDecorationColor):
        (WebCore::RenderStyle::visitedLinkTextEmphasisColor):
        (WebCore::RenderStyle::visitedLinkTextFillColor):
        (WebCore::RenderStyle::visitedLinkTextStrokeColor):
        (WebCore::RenderStyle::stopColor):
        (WebCore::RenderStyle::floodColor):
        (WebCore::RenderStyle::lightingColor):
        * svg/SVGFEDiffuseLightingElement.cpp:
        (WebCore::SVGFEDiffuseLightingElement::build):
        * svg/SVGFEDropShadowElement.cpp:
        (WebCore::SVGFEDropShadowElement::build):
        * svg/SVGFEFloodElement.cpp:
        (WebCore::SVGFEFloodElement::build):
        * svg/SVGFESpecularLightingElement.cpp:
        (WebCore::SVGFESpecularLightingElement::build):
        * svg/SVGGradientElement.cpp:
        (WebCore::SVGGradientElement::buildStops):

2016-09-28  Ryosuke Niwa  <rniwa@webkit.org>

        assignedNodes should include fallback contents when flattened option is set
        https://bugs.webkit.org/show_bug.cgi?id=162656

        Reviewed by Antti Koivisto.

        Fixed the bug by traversing through fallback contents when there are no assigned nodes.

        Tests: imported/w3c/web-platform-tests/shadow-dom/slots.html
               imported/w3c/web-platform-tests/shadow-dom/slots-fallback.html

        * html/HTMLSlotElement.cpp:
        (WebCore::flattenAssignedNodes):
        (WebCore::HTMLSlotElement::assignedNodes):

2016-09-27  Wenson Hsieh  <wenson_hsieh@apple.com>

        Adopt MediaRemote SPI to achieve desired Now Playing behavior
        https://bugs.webkit.org/show_bug.cgi?id=162658
        <rdar://problem/28499358>

        Reviewed by Jer Noble.

        Restores the changes previously rolled out in r206444, and adopts new MediaRemote SPI to achieve the desired
        behavior for media in background tabs without breaking other features.

        Introduces 2 new unit tests in NowPlayingControlsTests.

        * html/MediaElementSession.cpp:
        (WebCore::MediaElementSession::pageAllowsNowPlayingControls):
        * page/Page.cpp:
        (WebCore::Page::setViewState):
        * platform/audio/PlatformMediaSessionManager.h:
        (WebCore::PlatformMediaSessionManager::hasActiveNowPlayingSession):
        * platform/audio/mac/MediaSessionManagerMac.h:
        * platform/audio/mac/MediaSessionManagerMac.mm:
        (WebCore::MediaSessionManagerMac::updateNowPlayingInfo):
        * platform/mac/MediaRemoteSoftLink.cpp:
        * platform/mac/MediaRemoteSoftLink.h:
        * platform/spi/mac/MediaRemoteSPI.h:

2016-09-28  Said Abou-Hallawa  <sabouhallawa@apple.com>

        REGRESSION(r206481): ASSERTION FAILED: isDecoderAvailable()
        https://bugs.webkit.org/show_bug.cgi?id=162665

        Reviewed by Simon Fraser.

        Remove a wrong assertion from ImageSource::destroyDecodedData(). Before
        r206481, the original function BitmapImage::destroyDecodedData() did not
        have this assertion. Destroying the decoded ImageFrames can happen after
        releasing the ImageDecoder. And it can happen also if decoding the image
        fails and BitmapImage::isNull() is true. See CachedImage::finishLoading().

        * platform/graphics/ImageSource.cpp:
        (WebCore::ImageSource::destroyDecodedData):

2016-09-28  Youenn Fablet  <youenn@apple.com>

        WebCore::ResourceErrorBase::setType is crashing
        https://bugs.webkit.org/show_bug.cgi?id=162484
        <rdar://problem/28390828>

        Reviewed by Alex Christensen.

        Test: http/tests/xmlhttprequest/on-network-timeout-error-during-preflight.html

        Behavior is slightly changed as we are no longer casting Timeout preflight errors as AccessControl errors.
        This is more inline with fetch spec which prescribes to send back any error received by preflight as response error for fetch.

        Ideally, we should not need to change errors received during preflight loads but the error type is important for some clients:
        - EventSource may try to reconnect if error is not AccessControl
        - XMLHttpRequest will send abort events in case of Cancellation errors and timeout events in case of Timeout errors

        * loader/CrossOriginPreflightChecker.cpp:
        (WebCore::CrossOriginPreflightChecker::notifyFinished): Setting error type to AccessControl except in case of Timeout.
        (WebCore::CrossOriginPreflightChecker::doPreflight): Ditto.
        * loader/DocumentThreadableLoader.cpp:
        (WebCore::DocumentThreadableLoader::preflightFailure): Removing ASSERT since Timeout errors may be returned.
        * platform/network/ResourceErrorBase.h:
        (WebCore::ResourceErrorBase::isGeneral): New getter.

2016-09-28  Jer Noble  <jer.noble@apple.com>

        PiP shows incorrect state of play button.
        https://bugs.webkit.org/show_bug.cgi?id=162652

        Reviewed by Eric Carlson.

        After getting a new WebPlaybackSessionModel, the first thing WebVideoFullscreenInterfaceMac
        should do is query for it's playbackRate() and isPlaying() properties.

        * platform/mac/WebVideoFullscreenInterfaceMac.mm:
        (WebCore::WebVideoFullscreenInterfaceMac::WebVideoFullscreenInterfaceMac):

2016-09-28  Michael Catanzaro  <mcatanzaro@igalia.com>

        [GTK] Add Chrome UA quirk
        https://bugs.webkit.org/show_bug.cgi?id=162617

        Reviewed by Carlos Garcia Campos.

        Add Chrome UA quirk and use it on typekit.net, typekit.com, youtube.com, slack.com, and
        any domain that begins with "google".

        * platform/gtk/UserAgentGtk.cpp:
        (WebCore::buildUserAgentString):
        (WebCore::urlRequiresChromeBrowser):
        (WebCore::standardUserAgentForURL):

2016-09-28  Jer Noble  <jer.noble@apple.com>

        [MSE][Mac] In SourceBufferPrivateAVFObjC::abort(), support reseting parser to the last appended initialization segment.
        https://bugs.webkit.org/show_bug.cgi?id=135164

        Reviewed by Eric Carlson.

        Test: media/media-source/media-source-abort-resets-parser.html

        Use the -[AVStreamDataParser appendStreamData:withFlags:] to implement "resetting" the parser. In this case,
        the parser isn't explicitly reset during resetParserState(), but rather a flag is set so that the next append
        signals a data discontinuity, and the parser is reset at that point.

        Because a previous append operation may be in-flight during this abort(), care must be taken to invalidate any
        operations which may have already started on a background thread. So SourceBufferPrivateAVFObjC will use a
        separate WeakPtrFactory for its append operations, will invalidate any outstanding WeakPtrs during an abort(),
        and will block until the previous append() operation completes.

        This will require the WebAVStreamDataParserListener object to occasionally have it's WeakPtr pointing back to the
        SourceBufferPrivateAVFObjC to be reset after an abort(), so make that ivar an @property. Rather than passing a
        RetainPtr to itself in all the callbacks it handles, the WebAVStreamDataParserListener can just pass in a copy
        of its own WeakPtr (which may be invalidated during an abort()).

        Break the distinct operations of "abort()" and "resetParserState()" into their own methods in SourceBufferPrivate
        and all its subclasses.

        * Modules/mediasource/SourceBuffer.cpp:
        (WebCore::SourceBuffer::resetParserState):
        (WebCore::SourceBuffer::abortIfUpdating):
        * platform/graphics/SourceBufferPrivate.h:
        * platform/graphics/avfoundation/objc/SourceBufferPrivateAVFObjC.h:
        * platform/graphics/avfoundation/objc/SourceBufferPrivateAVFObjC.mm:
        (-[WebAVStreamDataParserListener streamDataParser:didParseStreamDataAsAsset:]):
        (-[WebAVStreamDataParserListener streamDataParser:didParseStreamDataAsAsset:withDiscontinuity:]):
        (-[WebAVStreamDataParserListener streamDataParser:didFailToParseStreamDataWithError:]):
        (-[WebAVStreamDataParserListener streamDataParser:didProvideMediaData:forTrackID:mediaType:flags:]):
        (-[WebAVStreamDataParserListener streamDataParser:didReachEndOfTrackWithTrackID:mediaType:]):
        (-[WebAVStreamDataParserListener streamDataParserWillProvideContentKeyRequestInitializationData:forTrackID:]):
        (-[WebAVStreamDataParserListener streamDataParser:didProvideContentKeyRequestInitializationData:forTrackID:]):
        (WebCore::SourceBufferPrivateAVFObjC::SourceBufferPrivateAVFObjC):
        (WebCore::SourceBufferPrivateAVFObjC::append):
        (WebCore::SourceBufferPrivateAVFObjC::abort):
        (WebCore::SourceBufferPrivateAVFObjC::resetParserState):
        (-[WebAVStreamDataParserListener initWithParser:parent:]): Deleted.
        * platform/graphics/gstreamer/SourceBufferPrivateGStreamer.cpp:
        (WebCore::SourceBufferPrivateGStreamer::resetParserState):
        * platform/graphics/gstreamer/SourceBufferPrivateGStreamer.h:
        * platform/mock/mediasource/MockSourceBufferPrivate.cpp:
        (WebCore::MockSourceBufferPrivate::resetParserState):
        * platform/mock/mediasource/MockSourceBufferPrivate.h:
        * platform/spi/mac/AVFoundationSPI.h:

2016-09-28  Michael Catanzaro  <mcatanzaro@igalia.com>

        [GTK] User agent should always claim to be Intel
        https://bugs.webkit.org/show_bug.cgi?id=162610

        Reviewed by Carlos Garcia Campos.

        We should always claim to be running on Intel regardless of actual CPU type. See discussion
        in bug #162548 for details. In particular, we can never advertise ARM because it causes dumb
        websites to send mobile pages.

        * platform/gtk/UserAgentGtk.cpp:
        (WebCore::platformVersionForUAString):
        (WebCore::buildUserAgentString):
        (WebCore::cpuDescriptionForUAString): Deleted.

2016-09-28  Michael Catanzaro  <mcatanzaro@igalia.com>

        [GTK] Adjust OS X UA quirks list
        https://bugs.webkit.org/show_bug.cgi?id=162616

        Reviewed by Carlos Garcia Campos.

        Remove the OS X quirk for yahoo.com as it's no longer needed. Add quirks for taobao.com and
        whatsapp.com.

        * platform/gtk/UserAgentGtk.cpp:
        (WebCore::urlRequiresMacintoshPlatform):
        (WebCore::standardUserAgentForURL):

2016-09-28  Alejandro G. Castro  <alex@igalia.com>

        Add WebIDL special operation support: serializer
        https://bugs.webkit.org/show_bug.cgi?id=156293

        Reviewed by Youenn Fablet.

        Added support for the serializer special operation for WebIDLs,
        current implementation adds support for:
          - just the keyword: serializer; It will return all the
            attributes of in an object.
          - map of entries with the attributes: serializer = {attribute1,
            attribute2, ...}

        It creates a toJSON method that returns the serialized value
        converted into an ECMAScript value. For more information check the
        definition of the operation:

        http://heycam.github.io/webidl/#idl-serializers

        We have created a new function in the API of the objects
        that are marked as serializer.

        Used the support to add new API for RTCIceCandidate and
        RTCSessionDescription.

        Updated the tests expectations of the bindings.

        Tests: bindings/scripts/test/TestNode.idl
               bindings/scripts/test/TestObj.idl
               fast/mediastream/RTCIceCandidate.html
               fast/mediastream/RTCSessionDescription.html

        * Modules/mediastream/RTCIceCandidate.idl: Added the serializer
        operation.
        * Modules/mediastream/RTCSessionDescription.idl: Added the
        serializer operation.
        * bindings/scripts/CodeGeneratorJS.pm:
        (GenerateImplementation): Added the calls to the serializer
        code generator.
        (GenerateSerializerFunction): Added, generates the toJSON function
        adding all the serializable->attributes value to an object as
        defined in the spec.
        * bindings/scripts/IDLParser.pm: Modified the serializer parser
        that was unused to support the WebIDL spec parts. Added a new
        domSerializable type to store the list of attributes in the
        possible map.
        (parseSerializer): Modified the function to follow the
        semicolon rule in the spec, now the serializer line must have a
        semicolon like any other line.
        (parseSerializerRest): The function now has to get the attributes
        list from the pattern parsing function and add them to the
        domSerializable item.
        (parseSerializationPattern): Now this function returns the list of
        attributes in the serializable map or list if we have one.
        (parseSerializationAttributes): Added, this function replaces the
        Map and List functions, the currently supported parts are similar
        for both situations.
        (applyMemberList): Added the serializable item to the interface
        variable and populate the serializable in case there is not a
        defined map.
        (parseSerializationPatternMap): Replaced with
        parseSerializationAttributes.
        (parseSerializationPatternList): Ditto.
        * bindings/scripts/test/JS/JSTestNode.cpp: Modified the expected result.
        (WebCore::jsTestNodePrototypeFunctionToJSON):
        * bindings/scripts/test/JS/JSTestObj.cpp: Modified the expected result.
        (WebCore::jsTestObjPrototypeFunctionToJSON):
        * bindings/scripts/test/TestNode.idl: Added the serializer test.
        * bindings/scripts/test/TestObj.idl: Added serializer map test.

2016-09-28  Michael Catanzaro  <mcatanzaro@igalia.com>

        [GTK] Simplify platformForUAString
        https://bugs.webkit.org/show_bug.cgi?id=162614

        Reviewed by Carlos Garcia Campos.

        Note in particular that the previous PLATFORM(MAC) check was wrong here, as that is never
        true for GTK; this patch risks changing it to OS(MAC_OS_X), on the hope that advertising Mac
        when running on Mac might not break anything. If it does, then we should remove it and just
        always pretend to be on X11.

        * platform/gtk/UserAgentGtk.cpp:
        (WebCore::platformForUAString):

2016-09-28  Michael Catanzaro  <mcatanzaro@igalia.com>

        [GTK] Bump fake Safari version in UA
        https://bugs.webkit.org/show_bug.cgi?id=162615

        Reviewed by Carlos Garcia Campos.

        Pretend to be Safari 10.0 to fix sites that don't work when we pretend to be Safari 8.0.

        * platform/gtk/UserAgentGtk.cpp:
        (WebCore::buildUserAgentString):

2016-09-28  Khaled Hosny  <khaledhosny@eglug.org>

        Use new woff2 API
        https://bugs.webkit.org/show_bug.cgi?id=162608

        Reviewed by Michael Catanzaro.

        Test: fast/text/woff2-totalsfntsize.html

        * platform/graphics/WOFFFileFormat.cpp:
        (WebCore::WOFF2VectorOut::WOFF2VectorOut):
        (WebCore::WOFF2VectorOut::Write):
        (WebCore::WOFF2VectorOut::Size):
        (WebCore::convertWOFFToSfnt):

2016-09-28  Michael Catanzaro  <mcatanzaro@igalia.com>

        [GTK] Add warning comment in UserAgentGtk.cpp
        https://bugs.webkit.org/show_bug.cgi?id=162618

        Reviewed by Carlos Garcia Campos.

        * platform/gtk/UserAgentGtk.cpp:

2016-09-28  Romain Bellessort  <romain.bellessort@crf.canon.fr>

        [Streams API] Align cancelReadableStream() with spec
        https://bugs.webkit.org/show_bug.cgi?id=162556

        Reviewed by Xabier Rodriguez-Calvar.

        Aligned cancelReadableStream() with Streams API. In particular, private cancel() method
        was added to ReadableStreamDefaultController and function name was replaced by readableStreamCancel().
        Implementation of cancel() (as well as pull()) is actually made in ReadableStreamInternals.js to
        avoid creating new function for each controller.

        No change in behaviour.

        * Modules/streams/ReadableStream.js:
        (cancel): Updated with reference to readableStreamCancel().
        * Modules/streams/ReadableStreamDefaultReader.js:
        (cancel): Updated with reference to readableStreamCancel().
        * Modules/streams/ReadableStreamInternals.js:
        (privateInitializeReadableStreamDefaultController): Refer to external functions (cancel/pull) to avoid
        creating new functions.
        (teeReadableStreamBranch2CancelFunction): Updated with reference to readableStreamCancel().
        (readableStreamCancel): New name for cancelReadableStream(), behaviour aligned with spec.
        (readableStreamDefaultControllerCancel): Added to avoid creating new function for each controller.
        (readableStreamDefaultControllerPull): Added to avoid creating new function for each controller.
        (readFromReadableStreamDefaultReader): Updated call to pull method to pass controller.
        * bindings/js/WebCoreBuiltinNames.h: Added "cancel".

2016-09-27  Joonghun Park  <jh718.park@samsung.com>

        [EFL] Fix debug build break since r206481. Unreviewed
        https://bugs.webkit.org/show_bug.cgi?id=162662

        No new tests, no new behaviours.

        * platform/graphics/BitmapImage.cpp:
        (WebCore::BitmapImage::draw):

2016-09-27  Nan Wang  <n_wang@apple.com>

        AX: CrashTracer: com.apple.WebKit.WebContent at WebCore::AXObjectCache::localCaretRectForCharacterOffset(WebCore::RenderObject*&, WebCore::CharacterOffset const&) + 116
        https://bugs.webkit.org/show_bug.cgi?id=162654

        Reviewed by Chris Fleizach.

        rangeForUnorderedCharacterOffsets() can return a null Range but we failed to
        do a null check in localCaretRectForCharacterOffset() before dereferencing it.

        Test: accessibility/mac/bounds-for-range-crash.html

        * accessibility/AXObjectCache.cpp:
        (WebCore::AXObjectCache::localCaretRectForCharacterOffset):

2016-09-27  Alex Christensen  <achristensen@webkit.org>

        Inline critical functions in URLParser
        https://bugs.webkit.org/show_bug.cgi?id=162653

        Reviewed by Myles C. Maxfield.

        This gives me about a 15% speed improvement.

        * platform/URLParser.cpp:
        (WebCore::CodePointIterator::CodePointIterator):
        (WebCore::CodePointIterator::operator==):
        (WebCore::CodePointIterator::operator!=):
        (WebCore::CodePointIterator::operator=):
        (WebCore::CodePointIterator::atEnd):
        (WebCore::CodePointIterator::codeUnitsSince):
        (WebCore::CodePointIterator<LChar>::operator):
        (WebCore::CodePointIterator<UChar>::operator):
        (WebCore::appendCodePoint):
        (WebCore::isC0Control):
        (WebCore::isC0ControlOrSpace):
        (WebCore::isTabOrNewline):
        (WebCore::isInSimpleEncodeSet):
        (WebCore::isInDefaultEncodeSet):
        (WebCore::isInUserInfoEncodeSet):
        (WebCore::isInvalidDomainCharacter):
        (WebCore::isPercentOrNonASCII):
        (WebCore::isSlashQuestionOrHash):
        (WebCore::isValidSchemeCharacter):
        (WebCore::URLParser::advance):
        (WebCore::URLParser::isWindowsDriveLetter):
        (WebCore::URLParser::appendToASCIIBuffer):
        (WebCore::percentEncodeByte):
        (WebCore::URLParser::utf8PercentEncode):
        (WebCore::URLParser::utf8QueryEncode):
        (WebCore::isDefaultPort):
        (WebCore::isSpecialScheme):
        (WebCore::isPercentEncodedDot):
        (WebCore::isSingleDotPathSegment):
        (WebCore::isDoubleDotPathSegment):
        (WebCore::consumeSingleDotPathSegment):
        (WebCore::consumeDoubleDotPathSegment):
        (WebCore::URLParser::popPath):
        (WebCore::URLParser::parsedDataView):
        (WebCore::URLParser::currentPosition):
        (WebCore::zeroSequenceLength):
        (WebCore::findLongestZeroSequence):
        (WebCore::pow256):
        (WebCore::percentDecode):
        (WebCore::containsOnlyASCII):
        (WebCore::domainToASCII):
        (WebCore::hasInvalidDomainCharacter):
        (WebCore::formURLDecode):
        (WebCore::serializeURLEncodedForm):

2016-09-27  Zalan Bujtas  <zalan@apple.com>

        REGRESSION (r204552): Yelp carousel animation is not smooth.
        https://bugs.webkit.org/show_bug.cgi?id=162632

        Reviewed by Simon Fraser.

        For composited state changes when the layers don't need rebuilding, the updateGeometry() traversal
        is post-order (see webkit.org/162634), so we can't rely on the offsetfromRenderer() value when
        computing the graphics layer position on the descendants. We need this workaround until after webkit.org/162634
        gets fixed.

        Tests: compositing/hidpi-composited-container-and-graphics-layer-gap-changes.html
               compositing/hidpi-negative-composited-bounds-on-device-pixel.html

        * rendering/RenderLayerBacking.cpp:
        (WebCore::computeOffsetFromAncestorGraphicsLayer):
        (WebCore::ComputedOffsets::ComputedOffsets):
        (WebCore::ComputedOffsets::fromAncestorGraphicsLayer):
        (WebCore::RenderLayerBacking::computeParentGraphicsLayerRect):

2016-09-27  Said Abou-Hallawa  <sabouhallawa@apple.com>

        Move caching the ImageFrame from BitmapImage to ImageSource
        https://bugs.webkit.org/show_bug.cgi?id=155498

        Reviewed by Simon Fraser.

        BitmapImage has two modes of operation regarding its image decoding state.
        The first mode happens when a remote image is loaded as encoded data and
        which requires an ImageDecoder to generate the image metadata and the
        the ImageFrames. The second mode happens when a BitmapImage is created
        with a NativeImagePtr. In this case, no ImageDecoder is needed.

        To remove this burden from the BitmapImage the member 'm_frames' is removed
        from BitmapImage. A new member named 'm_frameCache' of type ImageFrameCache
        is added to ImageSource. This class handles caching and recaching the image
        metadata and the ImageFrames if the image needs decoding. When the BitmapImage
        is initialized with a memory image, the ImageFrameCache initializes its
        metadata and ImageFrames directly from the NativeImagePtr.

        The plan for ImageFrameCache is to be extended for the asynchronous image
        decoding and also to be used by the non CG image decoders which cache
        other copies of the ImageFrames. This double caching should be removed.

        When the BitmapImage is replying to the ImageFrame queries, it will ask the
        ImageSource which will pass the query the ImageFrameCache. ImageFrameCache
        will ensure the requested ImageFrame is cached and is valid for the requested
        SubSamplingLevel before accessing the data members of this ImageFrame.

        * CMakeLists.txt:
        * WebCore.xcodeproj/project.pbxproj:
        Add and ImageFrameCache.cpp to the WebCore project.

        * platform/graphics/BitmapImage.cpp:
        (WebCore::BitmapImage::BitmapImage): Move initializing the image metadata to
        ImageSource. Add initializers for the remaining members in the class declaration.

        (WebCore::BitmapImage::destroyDecodedData): Move most of the logic of this
        function to ImageFrameCache::destroyDecodedData(). The only part which can't
        be moved is the call invalidatePlatformData().

        (WebCore::BitmapImage::destroyDecodedDataIfNecessary): Move the logic of this
        function to ImageFrameCache::destroyDecodedDataIfNecessary().

        (WebCore::BitmapImage::dataChanged): Move the logic of this function to
        ImageSource::dataChanged().

        (WebCore::BitmapImage::frameImageAtIndex): Move most of the logic of this
        function to ImageFrameCache::frameImageAtIndex(). The only part which can't
        be moved is the call invalidatePlatformData() if the required subsampling
        level is different from the subsampling level for the cached frame image.

        (WebCore::BitmapImage::draw): Replace the BitmapImage  cached metadata with
        the corresponding ImageSource cached metadata.
        (WebCore::BitmapImage::drawPattern): Ditto.
        (WebCore::BitmapImage::shouldAnimate): Ditto.
        (WebCore::BitmapImage::startAnimation): Ditto.
        (WebCore::BitmapImage::internalAdvanceAnimation): Ditto.

        (WebCore::BitmapImage::dump): Call ImageSource::dump() to dump the image
        cached metadata.

        (WebCore::BitmapImage::haveFrameImageAtIndex): Deleted.
        (WebCore::BitmapImage::destroyMetadataAndNotify): Deleted.
        (WebCore::BitmapImage::cacheFrame): Deleted.
        (WebCore::BitmapImage::didDecodeProperties): Deleted.
        (WebCore::BitmapImage::updateSize): Deleted.
        (WebCore::BitmapImage::size): Deleted.
        (WebCore::BitmapImage::sizeRespectingOrientation): Deleted.
        (WebCore::BitmapImage::hotSpot): Deleted.
        (WebCore::BitmapImage::frameCount): Deleted.
        (WebCore::BitmapImage::isSizeAvailable): Deleted.
        (WebCore::BitmapImage::ensureFrameAtIndexIsCached): Deleted.
        (WebCore::BitmapImage::frameIsCompleteAtIndex): Deleted.
        (WebCore::BitmapImage::frameDurationAtIndex): Deleted.
        (WebCore::BitmapImage::frameHasAlphaAtIndex): Deleted.
        (WebCore::BitmapImage::currentFrameKnownToBeOpaque): Deleted.
        (WebCore::BitmapImage::frameOrientationAtIndex): Deleted.
        (WebCore::BitmapImage::singlePixelSolidColor): Deleted.
        (WebCore::BitmapImage::repetitionCount): Deleted.
        * platform/graphics/BitmapImage.h:
        Managing the ImageFrames caching is moved to ImageFrameCache. Caching the
        image metadata is now moved to the ImageSource.
        
        * platform/graphics/GeneratedImage.h:
        * platform/graphics/Image.h:
        (WebCore::Image::orientationForCurrentFrame):
        (WebCore::Image::singlePixelSolidColor):
        Change currentFrameKnownToBeOpaque(), orientationForCurrentFrame() and
        singlePixelSolidColor() to be const.
        
        * platform/graphics/ImageFrame.cpp:
        (WebCore::ImageFrame::defaultFrame): Returns an empty ImageFrame to get the default ImageFrame metadata.
        (WebCore::ImageFrame::fillMetadata): Deleted. Moved to ImageFrameCache.
        (WebCore::ImageFrame::initialize): Deleted. Ditto.
        
        * platform/graphics/ImageFrame.h:
        (WebCore::ImageFrame::setDuration): Change the type of the argument to float instead of unsigned.
        (WebCore::ImageFrame::hasAlpha): Protect the unset m_hasAlpha by checking hasMetadata() first.

        * platform/graphics/ImageFrameCache.cpp: Added.
        (WebCore::ImageFrameCache::ImageFrameCache): Two constructors similar to what we do for ImageSource and BitmapImage.
        (WebCore::ImageFrameCache::destroyDecodedData): Moved from BitmapImage.cpp.
        (WebCore::ImageFrameCache::destroyDecodedDataIfNecessary): Ditto.
        (WebCore::ImageFrameCache::destroyIncompleteDecodedData): Ditto.
        (WebCore::ImageFrameCache::decodedSizeChanged): Ditto.
        (WebCore::ImageFrameCache::decodedSizeIncremented): Ditto.
        (WebCore::ImageFrameCache::decodedSizeDecremented): Ditto.
        (WebCore::ImageFrameCache::decodedSizeReset): Ditto.
        (WebCore::ImageFrameCache::didDecodeProperties): Ditto.
        (WebCore::ImageFrameCache::growFrames): Grows the size of m_frames if necessary.
        (WebCore::ImageFrameCache::setNativeImage): Initializes the ImageFrame metadata directly from the NativeImagePtr. 
        (WebCore::ImageFrameCache::setFrameNativeImage): Initializes the ImageFrame image and the metadata.
        (WebCore::ImageFrameCache::setFrameMetadata): Initializes the ImageFrame metadata from the ImageDecoder.
        (WebCore::ImageFrameCache::frameAtIndex): Returns an ImageFrame given its index. Cache or recache the requested ImageFrame if necessary.
        (WebCore::ImageFrameCache::clearMetadata): Invalidates the cached image metadata.
        (WebCore::ImageFrameCache::metadata): A template function which returns an image metadata property.
        (WebCore::ImageFrameCache::frameMetadataAtIndex): A template function which returns an ImageFrame metadata property.
        (WebCore::ImageFrameCache::isSizeAvailable): An image metadata property.
        (WebCore::ImageFrameCache::frameCount): Ditto.
        (WebCore::ImageFrameCache::repetitionCount): Ditto.
        (WebCore::ImageFrameCache::filenameExtension): Ditto.
        (WebCore::ImageFrameCache::hotSpot): Ditto.
        (WebCore::ImageFrameCache::size): An image metadata property but we get it from the first ImageFrame.
        (WebCore::ImageFrameCache::sizeRespectingOrientation): Ditto.
        (WebCore::ImageFrameCache::singlePixelSolidColor): Ditto.
        (WebCore::ImageFrameCache::frameIsCompleteAtIndex): An ImageFrame metadata property.
        (WebCore::ImageFrameCache::frameHasAlphaAtIndex): Ditto.
        (WebCore::ImageFrameCache::frameHasImageAtIndex): Ditto.
        (WebCore::ImageFrameCache::frameHasInvalidNativeImageAtIndex): Ditto.
        (WebCore::ImageFrameCache::frameSubsamplingLevelAtIndex): Ditto.
        (WebCore::ImageFrameCache::frameSizeAtIndex): Ditto.
        (WebCore::ImageFrameCache::frameBytesAtIndex): Ditto.
        (WebCore::ImageFrameCache::frameDurationAtIndex): Ditto.
        (WebCore::ImageFrameCache::frameOrientationAtIndex): Ditto.
        (WebCore::ImageFrameCache::frameImageAtIndex): Ditto.

        * platform/graphics/ImageFrameCache.h: Added.
        (WebCore::ImageFrameCache::setDecoder): Sets the current ImageDecoder which is owned by the ImageSource.
        (WebCore::ImageFrameCache::decodedSize): Returns the size of the cached NativeImages.
        (WebCore::ImageFrameCache::isDecoderAvailable): Returns whether an ImageDecoder is available.

        * platform/graphics/ImageSource.cpp:
        (WebCore::ImageSource::ImageSource): Initializes the ImageFrameCache based on the image decoding state.
        (WebCore::ImageSource::clearFrameBufferCache): Replace initialized() with isDecoderAvailable().
        (WebCore::ImageSource::clear): Clears the ImageDecoder of the ImageFrameCache.
        (WebCore::ImageSource::destroyDecodedData): Moved from BitmapImage.cpp.
        (WebCore::ImageSource::destroyDecodedDataIfNecessary): Ditto.
        (WebCore::ImageSource::ensureDecoderAvailable): Creates an ImageDecoder if necessary and sets it in ImageFrameCache.
        (WebCore::ImageSource::setData):
        (WebCore::ImageSource::dataChanged): Moved from BitmapImage.cpp.
        (WebCore::ImageSource::isAllDataReceived):
        (WebCore::ImageSource::maximumSubsamplingLevel): Rename calculateMaximumSubsamplingLevel() to maximumSubsamplingLevel().
        (WebCore::ImageSource::subsamplingLevelForScale):
        (WebCore::ImageSource::createFrameImageAtIndex):
        (WebCore::ImageSource::dump):
        (WebCore::ImageSource::calculateMaximumSubsamplingLevel): Deleted. Renamed to maximumSubsamplingLevel().
        (WebCore::ImageSource::updateMetadata): Deleted. Not needed. Caching the image metadata is the responsibility of ImageFrameCache. 
        (WebCore::ImageSource::bytesDecodedToDetermineProperties): Deleted. Not needed.
        (WebCore::ImageSource::isSizeAvailable): Deleted. Moved to ImageSource.h. 
        (WebCore::ImageSource::size): Deleted. Ditto.
        (WebCore::ImageSource::sizeRespectingOrientation): Deleted. Ditto.
        (WebCore::ImageSource::frameCount): Deleted. Ditto.
        (WebCore::ImageSource::repetitionCount): Deleted. Ditto.
        (WebCore::ImageSource::filenameExtension): Deleted. Ditto.
        (WebCore::ImageSource::hotSpot): Deleted. Ditto.
        (WebCore::ImageSource::frameIsCompleteAtIndex): Deleted. Ditto.
        (WebCore::ImageSource::frameHasAlphaAtIndex): Deleted. Ditto.
        (WebCore::ImageSource::frameAllowSubsamplingAtIndex): Deleted. Ditto.
        (WebCore::ImageSource::frameSizeAtIndex): Deleted. Ditto.
        (WebCore::ImageSource::frameBytesAtIndex): Deleted. Ditto.
        (WebCore::ImageSource::frameDurationAtIndex): Deleted. Ditto.
        (WebCore::ImageSource::frameOrientationAtIndex): Deleted. Ditto.

        * platform/graphics/ImageSource.h:
        (WebCore::ImageSource::isDecoderAvailable): initialized() was renamed to isDecoderAvailable().
        (WebCore::ImageSource::decodedSize): Send the query to ImageFrameCache.
        (WebCore::ImageSource::isSizeAvailable): Ditto.
        (WebCore::ImageSource::frameCount): Ditto.
        (WebCore::ImageSource::repetitionCount): Ditto.
        (WebCore::ImageSource::filenameExtension): Ditto.
        (WebCore::ImageSource::hotSpot): Ditto.
        (WebCore::ImageSource::size): Ditto.
        (WebCore::ImageSource::sizeRespectingOrientation): Ditto.
        (WebCore::ImageSource::singlePixelSolidColor): Ditto.
        (WebCore::ImageSource::frameIsCompleteAtIndex): Ditto.
        (WebCore::ImageSource::frameHasAlphaAtIndex): Ditto.
        (WebCore::ImageSource::frameHasImageAtIndex): Ditto.
        (WebCore::ImageSource::frameHasInvalidNativeImageAtIndex): Ditto.
        (WebCore::ImageSource::frameSubsamplingLevelAtIndex): Ditto.
        (WebCore::ImageSource::frameSizeAtIndex): Ditto.
        (WebCore::ImageSource::frameBytesAtIndex): Ditto.
        (WebCore::ImageSource::frameDurationAtIndex): Ditto.
        (WebCore::ImageSource::frameOrientationAtIndex): Ditto.
        (WebCore::ImageSource::frameImageAtIndex): Ditto.
        (WebCore::ImageSource::decoder): Deleted. Not needed.
        (WebCore::ImageSource::initialized): Deleted. Was renamed to isDecoderAvailable().
        (WebCore::ImageSource::setNeedsUpdateMetadata): Deleted. Not needed.

        * platform/graphics/cairo/GraphicsContext3DCairo.cpp:
        (WebCore::GraphicsContext3D::ImageExtractor::extractImage): AlphaOption and GammaAndColorProfileOption are moved out of ImageSource.
        * platform/graphics/cg/GraphicsContext3DCG.cpp:
        (WebCore::GraphicsContext3D::ImageExtractor::extractImage): Ditto.
        
        * platform/graphics/cg/ImageDecoderCG.cpp:
        (WebCore::ImageDecoder::ImageDecoder): Make the constructor of ImageDecoder be the same for all ports. 
        (WebCore::ImageDecoder::setData): Removed unused overloaded function.
        (WebCore::ImageDecoder::size): Deleted.  Removed unused function.

        * platform/graphics/cg/ImageDecoderCG.h:
        (WebCore::ImageDecoder::create): Make the constructor of CG ImageDecoder be like the other ports.
        (WebCore::ImageDecoder::isAllDataReceived): Make this property owned by ImageDecoder.

        * platform/graphics/cg/PDFDocumentImage.h: Change currentFrameKnownToBeOpaque() to be const.

        * platform/graphics/efl/GraphicsContext3DEfl.cpp:
        (WebCore::GraphicsContext3D::ImageExtractor::extractImage): AlphaOption and GammaAndColorProfileOption are moved out of ImageSource.
        
        * platform/graphics/mac/ImageMac.mm:
        (WebCore::BitmapImage::invalidatePlatformData): m_frames is owned by ImageFrameCache. ImageFrameCache::frameCount() has to 
        be equal to ImageFrame::m_frames.size().

        * platform/image-decoders/ImageDecoder.cpp:
        (WebCore::ImageDecoder::create): AlphaOption and GammaAndColorProfileOption are moved out of ImageSource.
        * platform/image-decoders/ImageDecoder.h:
        (WebCore::ImageDecoder::ImageDecoder): Ditto.
        (WebCore::ImageDecoder::frameCount): Make frameCount const so it can be passed to the template function ImageFrameCache::metadata().
        * platform/image-decoders/bmp/BMPImageDecoder.cpp:
        (WebCore::BMPImageDecoder::BMPImageDecoder): AlphaOption and GammaAndColorProfileOption are moved out of ImageSource.
        * platform/image-decoders/bmp/BMPImageDecoder.h:
        * platform/image-decoders/gif/GIFImageDecoder.cpp:
        (WebCore::GIFImageDecoder::GIFImageDecoder): AlphaOption and GammaAndColorProfileOption are moved out of ImageSource.
        (WebCore::GIFImageDecoder::frameCount): Make frameCount const so it can be passed to the template function ImageFrameCache::metadata().
        * platform/image-decoders/gif/GIFImageDecoder.h:
        * platform/image-decoders/gif/GIFImageReader.cpp:
        * platform/image-decoders/gif/GIFImageReader.h:
        * platform/image-decoders/ico/ICOImageDecoder.cpp:
        (WebCore::ICOImageDecoder::ICOImageDecoder): 
        (WebCore::ICOImageDecoder::frameCount): Make frameCount const so it can be passed to the template function ImageFrameCache::metadata().
        (WebCore::ICOImageDecoder::decode): Move resizing the m_frameBufferCache from ICOImageDecoder::frameCount() to ICOImageDecoder::decode().
        (WebCore::ICOImageDecoder::decodeAtIndex): AlphaOption and GammaAndColorProfileOption are moved out of ImageSource.
        * platform/image-decoders/ico/ICOImageDecoder.h:
        * platform/image-decoders/jpeg/JPEGImageDecoder.cpp:
        (WebCore::JPEGImageDecoder::JPEGImageDecoder): AlphaOption and GammaAndColorProfileOption are moved out of ImageSource.
        * platform/image-decoders/jpeg/JPEGImageDecoder.h:
        * platform/image-decoders/png/PNGImageDecoder.cpp:
        (WebCore::PNGImageDecoder::PNGImageDecoder): AlphaOption and GammaAndColorProfileOption are moved out of ImageSource.
        * platform/image-decoders/png/PNGImageDecoder.h:
        (WebCore::PNGImageDecoder::frameCount): Make frameCount const so it can be passed to the template function ImageFrameCache::metadata().
        * platform/image-decoders/webp/WEBPImageDecoder.cpp:
        (WebCore::WEBPImageDecoder::WEBPImageDecoder):
        * platform/image-decoders/webp/WEBPImageDecoder.h:

        * svg/graphics/SVGImage.h: Make currentFrameKnownToBeOpaque() be const.
        * svg/graphics/SVGImageForContainer.h: Ditto.

2016-09-27  Alex Christensen  <achristensen@webkit.org>

        Correctly parse URLs with the first tab in the fragment
        https://bugs.webkit.org/show_bug.cgi?id=162650

        Reviewed by Saam Barati.

        Covered by a new API test.

        * platform/URLParser.cpp:
        (WebCore::URLParser::fragmentSyntaxViolation):

2016-09-27  Chris Dumez  <cdumez@apple.com>

        <a download> does not honor the same-origin requirement
        https://bugs.webkit.org/show_bug.cgi?id=156100

        Reviewed by Alex Christensen.

        We now completely ignore the "download" attribute on anchors if the
        href URL is cross-origin. We therefore navigate to the URL instead
        of forcefully downloading it in this case and leave it up to the server
        to give us the right headers if it should be downloaded. This is
        conservative and matches Firefox.

        Chrome and the HTML specification ignore only the suggested filename
        if the URL is cross-origin but still download the file.

        No new tests, updated existing test.

        * html/HTMLAnchorElement.cpp:
        (WebCore::HTMLAnchorElement::handleClick):

2016-09-27  Alex Christensen  <achristensen@webkit.org>

        URLParser: Handle windows drive letters after two slashes in relative URLs according to spec
        https://bugs.webkit.org/show_bug.cgi?id=162646

        Reviewed by Saam Barati.

        Covered by new API tests.

        * platform/URLParser.cpp:
        (WebCore::CodePointIterator::codeUnitsSince):
        (WebCore::URLParser::appendWindowsDriveLetter):
        (WebCore::URLParser::parse):
        (WebCore::isWindowsDriveLetter): Deleted.
        (WebCore::URLParser::checkWindowsDriveLetter): Deleted.
        * platform/URLParser.h:

2016-09-27  Alex Christensen  <achristensen@webkit.org>

        URLs with @ in the user should only search for the last @ until the end of the authority and host
        https://bugs.webkit.org/show_bug.cgi?id=162635

        Reviewed by Geoffrey Garen.

        Covered by new API tests.

        * platform/URLParser.cpp:
        (WebCore::URLParser::parse):

2016-09-27  Chris Dumez  <cdumez@apple.com>

        It should be possible to dispatch events on documents created using DOMParser
        https://bugs.webkit.org/show_bug.cgi?id=26147

        Reviewed by Ryosuke Niwa.

        It should be possible to dispatch events on documents created using
        DOMParser. It did not work because we were not setting the context
        document on the newly created document in DOMParser::parseFromString().

        Firefox and Chrome both already support this.

        Test: fast/dom/parsed-document-dispatchEvent.html

        * xml/DOMParser.cpp:
        (WebCore::DOMParser::DOMParser):
        (WebCore::DOMParser::parseFromString):
        * xml/DOMParser.h:
        (WebCore::DOMParser::create):
        * xml/DOMParser.idl:

2016-09-26  Myles C. Maxfield  <mmaxfield@apple.com>

        [Cocoa] Improve performance of complex text codepath
        https://bugs.webkit.org/show_bug.cgi?id=161936

        Reviewed by Simon Fraser.

        CoreText exposes a bit on the CTRunStatus which represents whether
        the run actually uses the glyph origins concept introduced in
        r205396. If this bit is not set, we can use the (slightly faster)
        call to CTRunGetAdvances() instead of
        CTRunGetBaseAdvancesAndOrigins(). In addition, if none of the runs
        have this bit set, we don't need to allocate storage for the vector
        of origins at all, thereby using less memory.

        No new tests because there is no behavior change.

        * platform/graphics/mac/ComplexTextController.cpp:
        (WebCore::ComplexTextController::advance):
        (WebCore::ComplexTextController::adjustGlyphsAndAdvances):
        * platform/graphics/mac/ComplexTextController.h:
        (WebCore::ComplexTextController::ComplexTextRun::glyphOrigins):
        (WebCore::ComplexTextController::glyphOrigin):
        * platform/graphics/mac/ComplexTextControllerCoreText.mm:
        (WebCore::ComplexTextController::ComplexTextRun::ComplexTextRun):
        * platform/spi/cocoa/CoreTextSPI.h:

2016-09-27  Ryosuke Niwa  <rniwa@webkit.org>

        Import w3c shadow DOM tests and fix one assertion
        https://bugs.webkit.org/show_bug.cgi?id=162629

        Reviewed by Chris Dumez.

        The assertion failure was caused by RelatedNodeRetargeter's constructor mixing up the ancestor tree scopes
        for the target and the related target. Fixed the bug by reversing the two.

        Tests: imported/w3c/web-platform-tests/shadow-dom/event-composed-path-with-related-target.html

        * dom/EventPath.cpp:
        (WebCore::RelatedNodeRetargeter::RelatedNodeRetargeter): i and m_ancestorTreeScopes are for the related target
        and j and targetTreeScopeAncestors are for the target.

2016-09-27  Chris Dumez  <cdumez@apple.com>

        It should be possible to dispatch events on documents that do not have a browsing context
        https://bugs.webkit.org/show_bug.cgi?id=162620

        Reviewed by Ryosuke Niwa.

        It should be possible to dispatch events on documents that do not have a browsing
        context (e.g. Documents created using DOMImplementation.createHTMLDocument()).
        Gecko and Blink both allow this but WebKit did not.

        The approach chosen to support this is similar to the one in Blink. When constructing
        a new document (e.g. using DOMImplementation.createHTMLDocument()) we now keep track
        of the context document. When requesting the scriptExecutionContext(), we now return
        the context document if the document has one instead of the document itself.

        Test: imported/w3c/web-platform-tests/dom/events/Event-dispatch-other-document.html

        * bindings/js/JSDocumentCustom.cpp:
        (WebCore::JSDocument::visitAdditionalChildren):
        * dom/DOMImplementation.cpp:
        (WebCore::DOMImplementation::createDocument):
        (WebCore::DOMImplementation::createHTMLDocument):
        * dom/Document.cpp:
        (WebCore::Document::create):
        (WebCore::Document::cloneDataFromDocument):
        (WebCore::Document::contextDocument):
        (WebCore::Document::takeDOMWindowFrom): Deleted.
        * dom/Document.h:
        (WebCore::Document::setContextDocument):
        (WebCore::Node::scriptExecutionContext):
        (WebCore::Node::isDocumentNode): Deleted.
        * dom/Document.idl:
        * xml/XMLHttpRequest.cpp:
        (WebCore::XMLHttpRequest::responseXML):

2016-09-27  Alex Christensen  <achristensen@webkit.org>

        Implement URLParser::syntaxViolation
        https://bugs.webkit.org/show_bug.cgi?id=162593

        Reviewed by Geoffrey Garen.

        Most of the time when parsing URLs, we just look at the URL, find offsets of the host, path, query, etc., 
        and the String can be used untouched.  When this happens, we do not want to allocate and copy the String.
        We want to just add a reference to an existing String.

        Sometimes we need to canonicalize the String because there has been a syntaxViolation,
        defined as any String that is different than its canonicalized URL String.  In such cases we need to
        allocate a new String and fill it with the canonicalized URL String.  When a syntaxViolation happens for the
        first time, we know that everything in the input String up to that point is equal to what it would have been
        if we had canonicalized the beginning of the URL, copy it into a buffer, and continue parsing in a mode where
        instead of just looking at the input URL String, we canonicalize each code point into the buffer.

        Changes to behavior involve additional spec compliance with tabs and newlines in different places in URLs,
        as well as additional spec compliance when parsing empty and null URLs relative to other URLs.
        Both are covered by new API tests. Existing behavior covered by existing API tests.

        This is about a 15% speed improvement on my URL parsing benchmark.

        * platform/URL.cpp:
        (WebCore::assertProtocolIsGood):
        (WebCore::URL::protocolIs):
        (WebCore::protocolIs):
        * platform/URL.h:
        * platform/URLParser.cpp:
        (WebCore::isTabOrNewline):
        (WebCore::URLParser::incrementIteratorSkippingTabsAndNewlines):
        (WebCore::URLParser::isWindowsDriveLetter):
        (WebCore::URLParser::appendToASCIIBuffer):
        (WebCore::URLParser::checkWindowsDriveLetter):
        (WebCore::URLParser::shouldCopyFileURL):
        (WebCore::URLParser::utf8PercentEncode):
        (WebCore::URLParser::utf8QueryEncode):
        (WebCore::URLParser::copyURLPartsUntil):
        (WebCore::URLParser::syntaxViolation):
        (WebCore::URLParser::fragmentSyntaxViolation):
        (WebCore::URLParser::parsedDataView):
        (WebCore::URLParser::currentPosition):
        (WebCore::URLParser::URLParser):
        (WebCore::URLParser::parse):
        (WebCore::URLParser::parseAuthority):
        (WebCore::URLParser::parseIPv4Number):
        (WebCore::URLParser::parseIPv4Host):
        (WebCore::URLParser::parseIPv6Host):
        (WebCore::URLParser::parsePort):
        (WebCore::URLParser::parseHostAndPort):
        (WebCore::serializeURLEncodedForm):
        (WebCore::URLParser::allValuesEqual):
        (WebCore::URLParser::internalValuesConsistent):
        (WebCore::URLParser::incrementIteratorSkippingTabAndNewLine): Deleted.
        (WebCore::URLParser::syntaxError): Deleted.
        (WebCore::parseIPv4Number): Deleted.
        * platform/URLParser.h:
        (WebCore::URLParser::incrementIteratorSkippingTabsAndNewlines):

2016-09-27  Wenson Hsieh  <wenson_hsieh@apple.com>

        Related videos on YouTube (and YouTube playlists) cause media controls to disappear
        https://bugs.webkit.org/show_bug.cgi?id=162621
        <rdar://problem/28484193>

        Reviewed by Jer Noble.

        Tweaks the main content media heuristic for better Now Playing behavior on YouTube by making the following
        changes:
        - Remove the strict requirement for audio to be actively playing for the session to be able to show
          controls for the purpose of Now Playing, making it the same as our policy for the controls manager.
        - Make playback requirement restrictions apply only for the controls manager. Videos that do not
          autoplay will still have the correct behavior with respect to Now Playing, since we will bail in the
          hasEverNotifiedAboutPlaying() check.
        - Only consider the main content heuristic as preventing media controls from showing up for the purposes
          of the controls manager. Now Playing should instead account for this by preferring elements large
          enough for main content after collecting all of the candidate sessions.

        * html/HTMLMediaElement.cpp:
        (WebCore::mediaElementSessionInfoForSession):
        (WebCore::preferMediaControlsForCandidateSessionOverOtherCandidateSession):
        (WebCore::HTMLMediaElement::updatePlayState):
        * html/MediaElementSession.cpp:
        (WebCore::MediaElementSession::canShowControlsManager):
        * platform/audio/mac/MediaSessionManagerMac.mm:
        (WebCore::MediaSessionManagerMac::sessionWillBeginPlayback):

2016-09-27  Chris Dumez  <cdumez@apple.com>

        Second parameter to MutationObserver.observe() should be optional
        https://bugs.webkit.org/show_bug.cgi?id=162627

        Reviewed by Ryosuke Niwa.

        Second parameter to MutationObserver.observe() should be optional:
        - https://dom.spec.whatwg.org/#interface-mutationobserver

        Firefox agrees with the specification. There is no real behavior change
        except that MutationObserver.prototype.observe.length is now 1 instead
        of 2. Passing only one parameter will still throw a TypeError because
        the Dictionary is empty. However, this parameter needs to be marked as
        optional because Web IDL requires the last parameter to be optional if
        it is a Dictionary.

        No new tests, rebaselined existing test.

        * dom/MutationObserver.idl:

2016-09-20  Anders Carlsson  <andersca@apple.com>

        PlatformEvent::m_modifiers should be an OptionSet
        https://bugs.webkit.org/show_bug.cgi?id=162326

        Reviewed by Daniel Bates.

        * page/EventHandler.cpp:
        (WebCore::EventHandler::handleAccessKey):
        * page/EventHandler.h:
        * page/mac/EventHandlerMac.mm:
        (WebCore::EventHandler::accessKeyModifiers):
        * platform/PlatformEvent.h:
        (WebCore::PlatformEvent::shiftKey):
        (WebCore::PlatformEvent::ctrlKey):
        (WebCore::PlatformEvent::altKey):
        (WebCore::PlatformEvent::metaKey):
        (WebCore::PlatformEvent::modifiers):
        (WebCore::PlatformEvent::PlatformEvent):
        * platform/PlatformKeyboardEvent.h:
        (WebCore::PlatformKeyboardEvent::PlatformKeyboardEvent):
        * platform/mac/PlatformEventFactoryMac.mm:
        (WebCore::modifiersForEvent):
        (WebCore::typeForEvent):
        * replay/SerializationMethods.cpp:
        (JSC::EncodingTraits<PlatformKeyboardEvent>::encodeValue):
        (JSC::EncodingTraits<PlatformKeyboardEvent>::decodeValue):
        * replay/WebInputs.json:

2016-09-27  Gustavo Noronha Silva  <gustavo.noronha@collabora.co.uk>

        [GTK] Handle Wayland & X11 correctly for GST_GL
        https://bugs.webkit.org/show_bug.cgi?id=162619

        Reviewed by Carlos Garcia Campos.

        The checks for GST_GL consider X11 and Wayland are exclusive alternatives, but it
        turns out we can enable both! We need to check them independently and also include
        a runtime check.

        * platform/graphics/gstreamer/MediaPlayerPrivateGStreamerBase.cpp:
        (WebCore::MediaPlayerPrivateGStreamerBase::ensureGstGLContext): fix checks for X11 and
        Wayland to handle the case where both are enabled. Includes a runtime check.

2016-09-27  Eric Carlson  <eric.carlson@apple.com>

        [MediaStream] Restructure MediaConstraints classes
        https://bugs.webkit.org/show_bug.cgi?id=162571

        Reviewed by Jer Noble.

        No new tests, no functional changes.

        * Modules/mediastream/MediaConstraintsImpl.cpp:
        (WebCore::MediaConstraintsImpl::initialize): Deleted, no longer used.
        * Modules/mediastream/MediaConstraintsImpl.h:

        * bindings/js/JSMediaDevicesCustom.cpp:
        (WebCore::createStringConstraint): Return Optional<> instead of RefPtr<>.
        (WebCore::createBooleanConstraint): Ditto.
        (WebCore::createDoubleConstraint): Ditto.
        (WebCore::createIntConstraint): Ditto.
        (WebCore::parseMediaTrackConstraintSetForKey): Deal with above change.

        * platform/mediastream/CaptureDeviceManager.cpp:
        (CaptureDeviceManager::verifyConstraintsForMediaType): Use constraints.mandatoryConstraints.filter
          instead of direct enumeration.
        (CaptureDeviceManager::sessionSupportsConstraint): Use downcast<>.
        (CaptureDeviceManager::isSupportedFrameRate): Ditto.

        * platform/mediastream/MediaConstraints.cpp:
        (WebCore::StringConstraint::find): Lose the ConstraintType parameter.
        (WebCore::StringConstraint::merge): Use downcast<>.
        (WebCore::FlattenedConstraint::set): Use ConstraintHolder.
        (WebCore::FlattenedConstraint::merge): Ditto.
        (WebCore::MediaTrackConstraintSetMap::forEach): New.
        (WebCore::MediaTrackConstraintSetMap::filter): Ditto.
        (WebCore::MediaTrackConstraintSetMap::isEmpty): Ditto.
        (WebCore::MediaTrackConstraintSetMap::set): Ditto.
        (WebCore::MediaConstraint::copy): Deleted.
        (WebCore::IntConstraint::copy): Deleted.
        (WebCore::DoubleConstraint::copy): Deleted.
        (WebCore::BooleanConstraint::copy): Deleted.
        (WebCore::StringConstraint::copy): Deleted.
        * platform/mediastream/MediaConstraints.h:
        (WebCore::MediaConstraint::MediaConstraint):
        (WebCore::MediaConstraint::isEmpty):
        (WebCore::MediaConstraint::isMandatory):
        (WebCore::MediaConstraint::merge):
        (WebCore::MediaConstraint::isInt):
        (WebCore::MediaConstraint::isDouble):
        (WebCore::MediaConstraint::isBoolean):
        (WebCore::MediaConstraint::isString):
        (WebCore::MediaConstraint::dataType):
        (WebCore::MediaConstraint::constraintType):
        (WebCore::NumericConstraint::getMin):
        (WebCore::NumericConstraint::getMax):
        (WebCore::NumericConstraint::getExact):
        (WebCore::NumericConstraint::getIdeal):
        (WebCore::NumericConstraint::fitnessDistance):
        (WebCore::NumericConstraint::validForRange):
        (WebCore::NumericConstraint::find):
        (WebCore::NumericConstraint::NumericConstraint):
        (WebCore::NumericConstraint::innerMerge):
        (WebCore::FlattenedConstraint::isEmpty):
        (WebCore::FlattenedConstraint::iterator::iterator):
        (WebCore::FlattenedConstraint::iterator::operator*):
        (WebCore::FlattenedConstraint::iterator::operator++):
        (WebCore::FlattenedConstraint::iterator::operator==):
        (WebCore::FlattenedConstraint::iterator::operator!=):
        (WebCore::FlattenedConstraint::begin):
        (WebCore::FlattenedConstraint::end):
        (WebCore::FlattenedConstraint::ConstraintHolder::create):
        (WebCore::FlattenedConstraint::ConstraintHolder::~ConstraintHolder):
        (WebCore::FlattenedConstraint::ConstraintHolder::constraint):
        (WebCore::FlattenedConstraint::ConstraintHolder::dataType):
        (WebCore::FlattenedConstraint::ConstraintHolder::constraintType):
        (WebCore::FlattenedConstraint::ConstraintHolder::ConstraintHolder):
        (WebCore::MediaConstraint::getMin): Deleted.
        (WebCore::MediaConstraint::getMax): Deleted.
        (WebCore::MediaConstraint::getExact): Deleted.
        (WebCore::MediaConstraint::getIdeal): Deleted.
        (WebCore::MediaConstraint::validForRange): Deleted.
        (WebCore::MediaConstraint::find): Deleted.
        (WebCore::MediaConstraint::fitnessDistance): Deleted.
        (WebCore::MediaConstraint::type): Deleted.

        * platform/mediastream/RealtimeMediaSource.cpp:
        (WebCore::RealtimeMediaSource::fitnessDistance): Use downcast<>.
        (WebCore::applyNumericConstraint):
        (WebCore::RealtimeMediaSource::applyConstraint): Ditto.
        (WebCore::RealtimeMediaSource::selectSettings): Ditto. Use constraints.mandatoryConstraints.filter
          instead of direct enumeration.
        (WebCore::RealtimeMediaSource::applyConstraints):
        (WebCore::RealtimeMediaSource::setSampleRate): Sample rate is an int, not a double.
        (WebCore::RealtimeMediaSource::setSampleSize): Sample size is also an int.
        * platform/mediastream/RealtimeMediaSource.h:

        * platform/mediastream/mac/AVCaptureDeviceManager.mm:
        (WebCore::AVCaptureDeviceManager::sessionSupportsConstraint): Use downcast<>.

        * platform/mock/MediaConstraintsMock.cpp:
        (WebCore::isIntMediaConstraintSatisfiable): Use downcast<>.
        (WebCore::isDoubleMediaConstraintSatisfiable): Ditto.
        (WebCore::isBooleanMediaConstraintSatisfiable): Ditto.
        (WebCore::isStringMediaConstraintSatisfiable):
        (WebCore::isSatisfiable):
        (WebCore::MediaConstraintsMock::verifyConstraints): Use constraints.mandatoryConstraints.filter
          instead of direct enumeration.
        * platform/mock/MediaConstraintsMock.h:

        * platform/mock/MockRealtimeAudioSource.h:
        * platform/mock/MockRealtimeMediaSourceCenter.cpp:
        (WebCore::MockRealtimeMediaSourceCenter::createMediaStream):

2016-09-27  Wenson Hsieh  <wenson_hsieh@apple.com>

        Some Now Playing behavior is broken after r206315
        https://bugs.webkit.org/show_bug.cgi?id=162625
        <rdar://problem/28496755>

        Reviewed by Jer Noble.

        Reverts the part of our heuristic that disables Now Playing in active tabs in the main window.

        * html/MediaElementSession.cpp:
        (WebCore::MediaElementSession::pageAllowsNowPlayingControls):
        * page/Page.cpp:
        (WebCore::Page::setViewState):

2016-09-27  Ryan Haddad  <ryanhaddad@apple.com>

        Remove an unneeded assert in InspectorOverlay.cpp
        https://bugs.webkit.org/show_bug.cgi?id=162581

        Reviewed by Alexey Proskuryakov.

        This assertion was added to catch unknown issues, but it is firing frequently enough on certain Inspector
        tests that it is causing more harm than good.

        * inspector/InspectorOverlay.cpp:
        (WebCore::buildQuadObjectForCSSRegionContentClip):
        (WebCore::evaluateCommandInOverlay):

2016-09-27  Jer Noble  <jer.noble@apple.com>

        Remove deprecated ENCRYPTED_MEDIA implementation.
        https://bugs.webkit.org/show_bug.cgi?id=161010

        Reviewed by Eric Carlson.

        Remove all references to the deprecated ENABLE_ENCRYPTED_MEDIA (leaving in place
        the soon-to-be deprecated ENABLE_ENCRYPTED_MEDIA_V2).

        * CMakeLists.txt:
        * Configurations/FeatureDefines.xcconfig:
        * DerivedSources.make:
        * WebCore.xcodeproj/project.pbxproj:
        * bindings/objc/DOMHTMLMediaElement.h:
        * bindings/objc/DOMHTMLMediaElement.mm:
        (-[DOMHTMLMediaElement canPlayType:]):
        (-[DOMHTMLMediaElement canPlayType:keySystem:]): Deleted.
        * bindings/js/JSDictionary.cpp:
        * bindings/js/JSDictionary.h:
        * dom/Element.idl:
        * dom/EventNames.in:
        * html/HTMLMediaElement.cpp:
        (WebCore::HTMLMediaElement::selectNextSourceChild):
        (WebCore::exceptionCodeForMediaKeyException): Deleted.
        (WebCore::HTMLMediaElement::canPlayType): Deleted.
        (WebCore::HTMLMediaElement::mediaPlayerKeyAdded): Deleted.
        (WebCore::HTMLMediaElement::mediaPlayerKeyError): Deleted.
        (WebCore::HTMLMediaElement::mediaPlayerKeyMessage): Deleted.
        (WebCore::HTMLMediaElement::mediaPlayerKeyNeeded): Deleted.
        * html/HTMLMediaElement.h:
        * html/HTMLMediaElement.idl:
        * html/MediaError.h:
        * html/MediaError.idl:
        * html/MediaKeyError.h:
        * html/MediaKeyError.idl:
        * html/MediaKeyEvent.cpp: Removed.
        (WebCore::MediaKeyEvent::MediaKeyEvent): Deleted.
        (WebCore::MediaKeyEvent::~MediaKeyEvent): Deleted.
        (WebCore::MediaKeyEvent::eventInterface): Deleted.
        * html/MediaKeyEvent.h: Removed.
        * html/MediaKeyEvent.idl: Removed.
        * platform/graphics/MediaPlayer.cpp:
        (WebCore::MediaPlayer::nextBestMediaEngine):
        (WebCore::MediaPlayer::generateKeyRequest): Deleted.
        (WebCore::MediaPlayer::addKey): Deleted.
        (WebCore::MediaPlayer::cancelKeyRequest): Deleted.
        (WebCore::MediaPlayer::keyAdded): Deleted.
        (WebCore::MediaPlayer::keyError): Deleted.
        (WebCore::MediaPlayer::keyMessage): Deleted.
        (WebCore::MediaPlayer::keyNeeded): Deleted.
        * platform/graphics/MediaPlayer.h:
        (WebCore::MediaPlayerClient::mediaPlayerKeyAdded): Deleted.
        (WebCore::MediaPlayerClient::mediaPlayerKeyError): Deleted.
        (WebCore::MediaPlayerClient::mediaPlayerKeyMessage): Deleted.
        (WebCore::MediaPlayerClient::mediaPlayerKeyNeeded): Deleted.
        * platform/graphics/MediaPlayerPrivate.h:
        (WebCore::MediaPlayerPrivateInterface::addKey): Deleted.
        (WebCore::MediaPlayerPrivateInterface::generateKeyRequest): Deleted.
        (WebCore::MediaPlayerPrivateInterface::cancelKeyRequest): Deleted.
        * platform/graphics/avfoundation/MediaPlayerPrivateAVFoundation.cpp:
        * platform/graphics/avfoundation/MediaPlayerPrivateAVFoundation.h:
        * platform/graphics/avfoundation/objc/CDMSessionAVContentKeySession.mm:
        (WebCore::CDMSessionAVContentKeySession::update):
        * platform/graphics/avfoundation/objc/MediaPlayerPrivateAVFoundationObjC.h:
        * platform/graphics/avfoundation/objc/MediaPlayerPrivateAVFoundationObjC.mm:
        (WebCore::MediaPlayerPrivateAVFoundationObjC::supportsKeySystem):
        (WebCore::MediaPlayerPrivateAVFoundationObjC::shouldWaitForLoadingOfResource):
        (WebCore::MediaPlayerPrivateAVFoundationObjC::supportsType): Deleted.
        (WebCore::MediaPlayerPrivateAVFoundationObjC::generateKeyRequest): Deleted.
        (WebCore::MediaPlayerPrivateAVFoundationObjC::addKey): Deleted.
        (WebCore::MediaPlayerPrivateAVFoundationObjC::cancelKeyRequest): Deleted.
        * platform/graphics/mac/MediaPlayerPrivateQTKit.mm:
        (WebCore::MediaPlayerPrivateQTKit::supportsType): Deleted.
        * testing/MockCDM.h:

2016-09-27  Youenn Fablet  <youenn@apple.com>

        [Fetch API] Use Ref<const T> in FetchBody::m_data variant
        https://bugs.webkit.org/show_bug.cgi?id=162599

        Reviewed by Alex Christensen.

        Covered by existing tests.

        Using Ref<const T> for all variants of m_data except for FormData since FetchBody is actually creating it and may modifiy it.
        Updating blob loading code path to use a const Blob& instead of a Blob&.

        * Modules/fetch/FetchBody.cpp:
        (WebCore::FetchBody::FetchBody):
        (WebCore::FetchBody::extract):
        (WebCore::FetchBody::clone):
        * Modules/fetch/FetchBody.h:
        (WebCore::FetchBody::blobBody):
        (WebCore::FetchBody::arrayBufferBody):
        (WebCore::FetchBody::arrayBufferViewBody):
        * Modules/fetch/FetchBodyOwner.cpp:
        (WebCore::FetchBodyOwner::loadBlob):
        * Modules/fetch/FetchBodyOwner.h:
        * Modules/fetch/FetchLoader.cpp:
        (WebCore::FetchLoader::start):
        * Modules/fetch/FetchLoader.h:

2016-09-27  Michael Catanzaro  <mcatanzaro@igalia.com>

        Unreviewed typo fix

        * platform/gtk/UserAgentGtk.cpp:
        (WebCore::standardUserAgent):

2016-09-27  Youenn Fablet  <youenn@apple.com>

        Clean-up CachedImage constructor
        https://bugs.webkit.org/show_bug.cgi?id=162601

        Reviewed by Sam Weinig.

        No change of behavior.
        Removing an unused constructor.
        Specializing one constructor for manually cached images.
        Cleaning initialization of some CachedImage fields.

        * loader/cache/CachedImage.cpp:
        (WebCore::CachedImage::CachedImage):
        * loader/cache/CachedImage.h:
        * loader/cache/MemoryCache.cpp:
        (WebCore::MemoryCache::addImageToCache):

2016-09-27  Michael Catanzaro  <mcatanzaro@igalia.com>

        [FreeType] Add comment further justifying use of FT_LOAD_FORCE_AUTOHINT
        https://bugs.webkit.org/show_bug.cgi?id=162607

        Reviewed by Martin Robinson.

        * platform/graphics/freetype/FontCustomPlatformDataFreeType.cpp:
        (WebCore::FontCustomPlatformData::FontCustomPlatformData):

2016-09-27  Mario Sanchez Prada  <mario@endlessm.com>

        Build fails for X11+EGL due to missing gst_gl_display_x11_new_with_display()
        https://bugs.webkit.org/show_bug.cgi?id=162606

        Reviewed by Gustavo Noronha Silva.

        Use the right check to retrieve the right instance of GstGLDisplay
        depending on whether we're using GLX or EGL, not X11 or Wayland.

        * platform/graphics/gstreamer/MediaPlayerPrivateGStreamerBase.cpp:
        (WebCore::MediaPlayerPrivateGStreamerBase::ensureGstGLContext):

2016-09-27  Youenn Fablet  <youenn@apple.com>

        [GTK][EFL] imported/w3c/web-platform-tests/fetch/api/basic/accept-header.html is failing
        https://bugs.webkit.org/show_bug.cgi?id=162547

        Reviewed by Michael Catanzaro.

        Covered by existing tests.

        * platform/network/soup/SoupNetworkSession.cpp:
        (WebCore::SoupNetworkSession::createTestingSession): Setting the underlying soupSession.

2016-09-27  Youenn Fablet  <youenn@apple.com>

        [Fetch API] Remove ReadableStreamSource firstReadCallback
        https://bugs.webkit.org/show_bug.cgi?id=162339

        Reviewed by Sam Weinig.

        No observable change of behavior.
        Removing ReadableStreamSource firstReadCallback.
        This makes the enqueuing of data to happen when the stream is created.
        In the future, we may want to implement doPull() to enqueue data when stream actually needs it.

        * Modules/fetch/FetchResponseSource.cpp:
        (WebCore::FetchResponseSource::doPull): Introduced as we introduce pull() in ReadableStreamSource.
        * Modules/fetch/FetchResponseSource.h:
        * Modules/streams/ReadableStreamInternals.js:
        (readFromReadableStreamDefaultReader): Removing firstReadCallback use.
        * Modules/streams/ReadableStreamSource.h: Renaming m_startPromise in m_promise since m_promise may store start and pull promises.
        (WebCore::ReadableStreamSource::isStarting):
        (WebCore::ReadableStreamSource::start):
        (WebCore::ReadableStreamSource::pull): Introduced to support ReadableStreamSource pulling.
        (WebCore::ReadableStreamSource::startFinished):
        (WebCore::ReadableStreamSource::pullFinished): Ditto.
        (WebCore::ReadableStreamSource::clean):
        * Modules/streams/ReadableStreamSource.idl: Ditto.
        * bindings/js/JSReadableStreamSourceCustom.cpp: Refactoring to use callPromiseFunction
        (WebCore::startReadableStream):
        (WebCore::JSReadableStreamSource::start):
        (WebCore::pullReadableStream): Introduced to support ReadableStreamSource pulling.
        (WebCore::JSReadableStreamSource::pull): Ditto.
        * bindings/js/WebCoreBuiltinNames.h: Removing firstReadCallback

2016-09-27  Myles C. Maxfield  <mmaxfield@apple.com>

        REGRESSION(r205883): Letterpressed text is invisible
        https://bugs.webkit.org/show_bug.cgi?id=162590
        <rdar://problem/28141512>

        Reviewed by Simon Fraser.

        r205883 removed the last place where we use CGFonts directly in WebKit. However,
        our letterpress code is sensitive to the current state of the CGContext.

        Tests: fast/text/letterpress-different.html
               fast/text/letterpress-paint.html

        * platform/graphics/cocoa/FontCascadeCocoa.mm:
        (WebCore::showLetterpressedGlyphsWithAdvances):

2016-09-27  Youenn Fablet  <youenn@apple.com>

        [Fetch API] Refactor FetchBody to use std::experimental::variant
        https://bugs.webkit.org/show_bug.cgi?id=162559

        Reviewed by Alex Christensen.

        Covered by exiting tests.

        Using variant to represent the variant data types.
        Adding nullptr as a specific type for default empty values and to allow clean-up.
        Adding FetchBody::clone as the default copy constructor is deleted with this change.

        * Modules/fetch/FetchBody.cpp:
        (WebCore::FetchBody::FetchBody):
        (WebCore::FetchBody::json):
        (WebCore::FetchBody::text):
        (WebCore::FetchBody::consumeAsStream):
        (WebCore::FetchBody::consumeArrayBuffer):
        (WebCore::FetchBody::consumeArrayBufferView):
        (WebCore::FetchBody::consumeText):
        (WebCore::FetchBody::consumeBlob):
        (WebCore::FetchBody::extractFromText):
        (WebCore::FetchBody::bodyForInternalRequest):
        (WebCore::FetchBody::clone):
        * Modules/fetch/FetchBody.h:
        (WebCore::FetchBody::blobBody):
        (WebCore::FetchBody::formDataBody):
        (WebCore::FetchBody::arrayBufferBody):
        (WebCore::FetchBody::arrayBufferViewBody):
        (WebCore::FetchBody::textBody):
        * Modules/fetch/FetchRequest.cpp:
        (WebCore::FetchRequest::clone):
        * Modules/fetch/FetchResponse.cpp:
        (WebCore::FetchResponse::cloneForJS):

2016-09-26  Joonghun Park  <jh718.park@samsung.com>

        [EFL] Fix debug build break since r204205. Unreviewed
        https://bugs.webkit.org/show_bug.cgi?id=162596

        No new tests, no new behaviours.

        * platform/graphics/BitmapImage.cpp:
        (WebCore::BitmapImage::frameImageAtIndex):

2016-09-26  Wenson Hsieh  <wenson_hsieh@apple.com>

        If you play a youtube video from now playing after it finished in Safari, controls disappear
        https://bugs.webkit.org/show_bug.cgi?id=162589
        <rdar://problem/28484047>

        Reviewed by Jer Noble.

        Tweaks the main content heuristic slightly to remove the "mostly in mainframe" requirement in the case of Now
        Playing. This was added in the case of the controls manager as an additional way to identify video elements that
        should not show controls, since we relax audio and video constraints for showing videos in the controls manager,
        so that a video element is prevented from showing controls on grounds of lacking audio only if it has never had
        audio before. In the case of Now Playing, we have stricter requirements for videos, which must have audio, which
        makes the mainframe heuristic not necessary.

        * html/MediaElementSession.cpp:
        (WebCore::MediaElementSession::canShowControlsManager):

2016-09-26  Antti Koivisto  <antti@apple.com>

        Setter on style element's textContent or cssText doesn't trigger style recalc
        https://bugs.webkit.org/show_bug.cgi?id=160331
        <rdar://problem/27609715>

        Reviewed by Ryosuke Niwa and Daniel Bates.

        We would not notify the parent when text node content changed in a shadow tree.

        Test: fast/shadow-dom/shadow-style-text-mutation.html

        * dom/AuthorStyleSheets.cpp:
        (WebCore::AuthorStyleSheets::updateActiveStyleSheets):

            Invalidate shadow root children instead of the root itself when doing full invalidation.
            The invalidity bits have no meaning for non-element, non-texts.

        * dom/CharacterData.cpp:
        (WebCore::CharacterData::parserAppendData):
        (WebCore::CharacterData::setDataAndUpdate):
        (WebCore::CharacterData::notifyParentAfterChange):

            Add a helper and call it also in shadow trees.

        (WebCore::CharacterData::dispatchModifiedEvent):
        * dom/CharacterData.h:

2016-09-26  Antti Koivisto  <antti@apple.com>

        Input elements don't work inside shadow tree
        https://bugs.webkit.org/show_bug.cgi?id=160427

        Reviewed by Darin Adler.

        There is a bug in ComposedTreeIterator. If the iterator is initialized with an initial state where the root
        is inside a shadow tree it won't iterate into slots.

        If an input element is in a shadow tree it generates narrowly scoped style updates. When RenderTreeUpdater
        applies such an update the update root will be inside the shadow tree and the bug will prevent the render tree
        for slotted content from updating.

        Added tests for both the iterator behavior and the specific symptom with input elements.

        Tests: fast/shadow-dom/composed-tree-shadow-child-subtree.html
               fast/shadow-dom/input-element-in-shadow.html

        * dom/ComposedTreeIterator.cpp:
        (WebCore::ComposedTreeIterator::ComposedTreeIterator):

            Check and cache if the root is inside shadow tree.

        (WebCore::ComposedTreeIterator::traverseNextInShadowTree):
        * dom/ComposedTreeIterator.h:
        (WebCore::ComposedTreeIterator::traverseNext):

            If it is, always use the shadow traversal code path.

2016-09-26  Wenson Hsieh  <wenson_hsieh@apple.com>

        Seeking video doesn't update seek position
        https://bugs.webkit.org/show_bug.cgi?id=162575
        <rdar://problem/28457219>

        Reviewed by Jer Noble.

        On ToT, seeking in a video causes the playhead to stutter, and does not actually update media remote's seek
        position. This is partly due to how we do not update media remote with new information when beginning to respond
        to remote seek commands, so media remote continues to think that a playing video is still playing despite the
        user attempting to seek through it.

        To fix this, we introduce timer-based guards around remote seek commands, such that a seek "gesture" begins when
        we receive the first seek command and ends when no seek command has been received in a set amount of time (this
        is 0.5 seconds, which is approximately what other clients around the platform use).

        Also, when responding to a remote seek, perform the seek with no tolerance. This prevents the playhead from
        stuttering at the end of a seek from the final requested destination of the seek to the last actually seeked
        time in the video.

        When beginning to seek, we must pause the media. Through existing mechanisms, this causes the media session
        manager to update its Now Playing information, which informs media remote that we are no longer playing and
        prevents us from stuttering. However, when ending a seek, we must also trigger an additional update to again
        refresh media remote's view of the current time. This prevents a flicker when playing media after seeking.

        Unit tests to be added in a follow-up due to time constraints.

        * html/HTMLMediaElement.cpp:
        (WebCore::HTMLMediaElement::HTMLMediaElement):
        (WebCore::HTMLMediaElement::handleSeekToPlaybackPosition):
        (WebCore::HTMLMediaElement::seekToPlaybackPositionEndedTimerFired):
        (WebCore::HTMLMediaElement::didReceiveRemoteControlCommand):
        * html/HTMLMediaElement.h:
        * platform/audio/PlatformMediaSessionManager.h:
        (WebCore::PlatformMediaSessionManager::scheduleUpdateNowPlayingInfo):
        (WebCore::PlatformMediaSessionManager::sessionDidEndRemoteScrubbing):
        (WebCore::PlatformMediaSessionManager::sessions): Deleted.
        * platform/audio/mac/MediaSessionManagerMac.h:
        * platform/audio/mac/MediaSessionManagerMac.mm:
        (WebCore::PlatformMediaSessionManager::updateNowPlayingInfoIfNecessary):
        (WebCore::MediaSessionManagerMac::scheduleUpdateNowPlayingInfo):
        (WebCore::MediaSessionManagerMac::sessionDidEndRemoteScrubbing):
        (WebCore::MediaSessionManagerMac::updateNowPlayingInfo):

2016-09-26  Chris Dumez  <cdumez@apple.com>

        [WK2] BlobDownloadClient should use asynchronous IPC to decide destination path
        https://bugs.webkit.org/show_bug.cgi?id=162568

        Reviewed by Alex Christensen.

        Update BlobResourceHandle to wait for continueDidReceiveResponse() to be
        called after it calls the client's didReceiveResponseAsync(), before
        actually reading the Blob Data.

        No new tests, covered by existing tests.

        * platform/network/BlobResourceHandle.cpp:
        (WebCore::BlobResourceHandle::continueDidReceiveResponse):
        (WebCore::BlobResourceHandle::getSizeForNext):
        (WebCore::BlobResourceHandle::notifyResponseOnSuccess):
        (WebCore::BlobResourceHandle::notifyResponseOnError):

2016-09-26  Daniel Bates  <dabates@apple.com>

        Mark Ping{Handle, Load} as final
        https://bugs.webkit.org/show_bug.cgi?id=162576

        Reviewed by Alex Christensen.

        We should not support subclassing of a ping handle or overriding its ResourceHandleClient
        callbacks because there are security/privacy implications with a ping request. We should
        not encourage subclassing without careful consideration.

        * platform/network/PingHandle.h:

2016-09-26  Daniel Bates  <dabates@apple.com>

        Rename IOS_TEXT_AUTOSIZING to TEXT_AUTOSIZING
        https://bugs.webkit.org/show_bug.cgi?id=162365

        Reviewed by Simon Fraser.

        Repurpose the feature name TEXT_AUTOSIZING for the ENABLE(IOS_TEXT_AUTOSIZING)-guarded code
        as this code represents WebKit's automatic text size adjustment machinery and is compiled
        on both macOS and iOS.

        * Configurations/FeatureDefines.xcconfig:
        * css/CSSComputedStyleDeclaration.cpp:
        (WebCore::ComputedStyleExtractor::propertyValue):
        * css/CSSPropertyNames.in:
        * css/StyleBuilderCustom.h:
        * css/StyleResolver.cpp:
        (WebCore::StyleResolver::updateFont):
        * css/StyleResolver.h:
        * css/parser/CSSParser.cpp:
        (WebCore::CSSParserContext::CSSParserContext):
        (WebCore::CSSParser::parseValue):
        * css/parser/CSSParser.h:
        * css/parser/CSSParserMode.h:
        * dom/Document.cpp:
        (WebCore::Document::destroyRenderTree):
        * dom/Document.h:
        * editing/EditingStyle.cpp:
        * page/FrameView.cpp:
        (WebCore::FrameView::layout):
        * page/Page.cpp:
        (WebCore::Page::Page):
        * page/Page.h:
        * page/Settings.in:
        * platform/graphics/FontCascade.h:
        * platform/graphics/FontDescription.cpp:
        * platform/graphics/FontDescription.h:
        * rendering/RenderBlockFlow.cpp:
        (WebCore::RenderBlockFlow::RenderBlockFlow):
        * rendering/RenderBlockFlow.h:
        * rendering/RenderElement.cpp:
        * rendering/RenderElement.h:
        * rendering/RenderObject.cpp:
        * rendering/RenderObject.h:
        * rendering/RenderText.cpp:
        (WebCore::RenderText::RenderText):
        * rendering/RenderText.h:
        * rendering/TextAutoSizing.cpp:
        * rendering/TextAutoSizing.h:
        * rendering/style/RenderStyle.cpp:
        (WebCore::RenderStyle::changeRequiresLayout):
        * rendering/style/RenderStyle.h:
        * rendering/style/StyleInheritedData.cpp:
        (WebCore::StyleInheritedData::StyleInheritedData):
        (WebCore::StyleInheritedData::operator==):
        * rendering/style/StyleInheritedData.h:
        * rendering/style/StyleRareInheritedData.cpp:
        (WebCore::StyleRareInheritedData::StyleRareInheritedData):
        (WebCore::StyleRareInheritedData::operator==):
        * rendering/style/StyleRareInheritedData.h:
        * rendering/style/TextSizeAdjustment.h:
        * testing/InternalSettings.cpp:
        (WebCore::InternalSettings::Backup::Backup):
        (WebCore::InternalSettings::Backup::restoreTo):
        (WebCore::InternalSettings::setTextAutosizingEnabled):
        (WebCore::InternalSettings::setTextAutosizingWindowSizeOverride):
        * testing/InternalSettings.h:

2016-09-26  Nan Wang  <n_wang@apple.com>

        AX: Progress: [Mac] Content in label element should be used as AXTitle or AXDescription
        https://bugs.webkit.org/show_bug.cgi?id=162573

        Reviewed by Chris Fleizach.

        Exposed the label element's text as the AXTitle of the progress indicator.

        Test: accessibility/mac/progress-with-label-element.html

        * accessibility/AccessibilityNodeObject.cpp:
        (WebCore::AccessibilityNodeObject::titleElementText):
        (WebCore::AccessibilityNodeObject::title):

2016-09-26  Ryan Haddad  <ryanhaddad@apple.com>

        Rebaseline bindings tests after r206386.

        Unreviewed test gardening.

        * bindings/scripts/test/JS/JSTestActiveDOMObject.cpp:
        * bindings/scripts/test/JS/JSTestCustomNamedGetter.cpp:
        * bindings/scripts/test/JS/JSTestEventConstructor.cpp:
        * bindings/scripts/test/JS/JSTestGlobalObject.cpp:
        * bindings/scripts/test/JS/JSTestInterface.cpp:
        * bindings/scripts/test/JS/JSTestNamedConstructor.cpp:
        * bindings/scripts/test/JS/JSTestNode.cpp:
        * bindings/scripts/test/JS/JSTestNondeterministic.cpp:
        * bindings/scripts/test/JS/JSTestObj.cpp:
        * bindings/scripts/test/JS/JSTestOverloadedConstructors.cpp:
        * bindings/scripts/test/JS/JSTestOverloadedConstructorsWithSequence.cpp:
        * bindings/scripts/test/JS/JSTestOverrideBuiltins.cpp:
        * bindings/scripts/test/JS/JSTestSerializedScriptValueInterface.cpp:
        * bindings/scripts/test/JS/JSTestTypedefs.cpp:

2016-09-26  Youenn Fablet  <youenn@apple.com>

        ASSERTION FAILED: m_origin || m_type == CachedResource::MainResource
        https://bugs.webkit.org/show_bug.cgi?id=162472
        <rdar://problem/28431522>

        Reviewed by Chris Dumez.

        Covered by existing tests.

        * loader/cache/CachedImage.cpp:
        (WebCore::CachedImage::CachedImage): Fixing the last CachedImage constructor.
        Using CachedResource protected constructor.
        * loader/cache/CachedResource.h: Small clean-up.

2016-09-26  Youenn Fablet  <youenn@apple.com>

        [GTK][EFL] imported/w3c/web-platform-tests/fetch/api/basic/accept-header.html is failing
        https://bugs.webkit.org/show_bug.cgi?id=162547

        Reviewed by Carlos Garcia Campos.

        Covered by LayoutTests/imported/w3c/web-platform-tests/fetch/api/basic/accept-header.html now passing.

        * platform/network/soup/SoupNetworkSession.cpp:
        (WebCore::SoupNetworkSession::createTestingSession): Setting a default Accept-Language value.

2016-09-26  Mark Lam  <mark.lam@apple.com>

        Added RETURN_IF_EXCEPTION() macro and use it for exception checks.
        https://bugs.webkit.org/show_bug.cgi?id=162521

        Reviewed by Saam Barati.

        No new tests because this patch is mostly refactoring.  The only change in
        behavior is that functions that have a JSValue return type will now return the
        empty JSValue when an exception is thrown.  I tested this behavior by running
        the existing JSC and layout tests.

        * bindings/js/ArrayValue.cpp:
        (WebCore::ArrayValue::get):
        * bindings/js/IDBBindingUtilities.cpp:
        (WebCore::toJS):
        * bindings/js/JSApplePaySessionCustom.cpp:
        (WebCore::JSApplePaySession::completeShippingMethodSelection):
        (WebCore::JSApplePaySession::completeShippingContactSelection):
        (WebCore::JSApplePaySession::completePaymentMethodSelection):
        * bindings/js/JSAudioTrackCustom.cpp:
        (WebCore::JSAudioTrack::setKind):
        (WebCore::JSAudioTrack::setLanguage):
        * bindings/js/JSBlobCustom.cpp:
        (WebCore::constructJSBlob):
        * bindings/js/JSCSSStyleDeclarationCustom.cpp:
        (WebCore::JSCSSStyleDeclaration::getPropertyCSSValue):
        * bindings/js/JSCommandLineAPIHostCustom.cpp:
        (WebCore::getJSListenerFunctions):
        * bindings/js/JSCryptoAlgorithmDictionary.cpp:
        (WebCore::JSCryptoAlgorithmDictionary::getAlgorithmIdentifier):
        (WebCore::getHashAlgorithm):
        (WebCore::createAesCbcParams):
        (WebCore::createAesKeyGenParams):
        (WebCore::createHmacKeyParams):
        (WebCore::createRsaKeyGenParams):
        (WebCore::createRsaOaepParams):
        * bindings/js/JSCryptoKeySerializationJWK.cpp:
        (WebCore::getStringFromJSON):
        (WebCore::JSCryptoKeySerializationJWK::reconcileUsages):
        (WebCore::JSCryptoKeySerializationJWK::keyDataRSAComponents):
        (WebCore::buildJSONForRSAComponents):
        (WebCore::addUsagesToJSON):
        (WebCore::JSCryptoKeySerializationJWK::serialize):
        * bindings/js/JSCustomElementInterface.cpp:
        (WebCore::constructCustomElementSynchronously):
        (WebCore::JSCustomElementInterface::upgradeElement):
        * bindings/js/JSCustomElementRegistryCustom.cpp:
        (WebCore::getCustomElementCallback):
        (WebCore::JSCustomElementRegistry::define):
        (WebCore::whenDefinedPromise):
        * bindings/js/JSDOMBinding.cpp:
        (WebCore::valueToUSVString):
        (WebCore::hasIteratorMethod):
        (WebCore::toSmallerInt):
        (WebCore::toSmallerUInt):
        (WebCore::toInt32EnforceRange):
        (WebCore::toUInt32EnforceRange):
        (WebCore::toInt64EnforceRange):
        (WebCore::toUInt64EnforceRange):
        * bindings/js/JSDOMBinding.h:
        (WebCore::toJSSequence):
        (WebCore::toJS):
        (WebCore::jsFrozenArray):
        * bindings/js/JSDOMPromise.cpp:
        (WebCore::rejectPromiseWithExceptionIfAny):
        * bindings/js/JSDOMStringMapCustom.cpp:
        (WebCore::JSDOMStringMap::putDelegate):
        * bindings/js/JSDOMWindowCustom.cpp:
        (WebCore::JSDOMWindow::setLocation):
        (WebCore::JSDOMWindow::open):
        (WebCore::JSDOMWindow::showModalDialog):
        (WebCore::handlePostMessage):
        (WebCore::JSDOMWindow::setTimeout):
        (WebCore::JSDOMWindow::setInterval):
        * bindings/js/JSDataCueCustom.cpp:
        (WebCore::constructJSDataCue):
        * bindings/js/JSDeviceMotionEventCustom.cpp:
        (WebCore::readAccelerationArgument):
        (WebCore::readRotationRateArgument):
        (WebCore::JSDeviceMotionEvent::initDeviceMotionEvent):
        * bindings/js/JSDictionary.cpp:
        (WebCore::JSDictionary::tryGetProperty):
        (WebCore::JSDictionary::convertValue):
        * bindings/js/JSDictionary.h:
        (WebCore::JSDictionary::tryGetPropertyAndResult):
        * bindings/js/JSDocumentCustom.cpp:
        (WebCore::JSDocument::getCSSCanvasContext):
        * bindings/js/JSFileCustom.cpp:
        (WebCore::constructJSFile):
        * bindings/js/JSGeolocationCustom.cpp:
        (WebCore::JSGeolocation::getCurrentPosition):
        (WebCore::JSGeolocation::watchPosition):
        * bindings/js/JSHTMLAllCollectionCustom.cpp:
        (WebCore::callHTMLAllCollection):
        * bindings/js/JSHTMLCanvasElementCustom.cpp:
        (WebCore::JSHTMLCanvasElement::getContext):
        * bindings/js/JSHTMLElementCustom.cpp:
        (WebCore::constructJSHTMLElement):
        * bindings/js/JSHistoryCustom.cpp:
        (WebCore::JSHistory::pushState):
        (WebCore::JSHistory::replaceState):
        * bindings/js/JSIDBDatabaseCustom.cpp:
        (WebCore::JSIDBDatabase::createObjectStore):
        * bindings/js/JSMessageEventCustom.cpp:
        (WebCore::handleInitMessageEvent):
        * bindings/js/JSMessagePortCustom.cpp:
        (WebCore::fillMessagePortArray):
        * bindings/js/JSMessagePortCustom.h:
        (WebCore::handlePostMessage):
        * bindings/js/JSMockContentFilterSettingsCustom.cpp:
        (WebCore::JSMockContentFilterSettings::setDecisionPoint):
        (WebCore::toDecision):
        (WebCore::JSMockContentFilterSettings::setDecision):
        (WebCore::JSMockContentFilterSettings::setUnblockRequestDecision):
        * bindings/js/JSNodeFilterCustom.cpp:
        (WebCore::JSNodeFilter::acceptNode):
        * bindings/js/JSNodeOrString.cpp:
        (WebCore::toNodeOrStringVector):
        * bindings/js/JSSQLTransactionCustom.cpp:
        (WebCore::JSSQLTransaction::executeSql):
        * bindings/js/JSSVGLengthCustom.cpp:
        (WebCore::JSSVGLength::convertToSpecifiedUnits):
        * bindings/js/JSStorageCustom.cpp:
        (WebCore::JSStorage::getOwnPropertyNames):
        * bindings/js/JSTextTrackCustom.cpp:
        (WebCore::JSTextTrack::setLanguage):
        * bindings/js/JSVideoTrackCustom.cpp:
        (WebCore::JSVideoTrack::setKind):
        (WebCore::JSVideoTrack::setLanguage):
        * bindings/js/JSWebGL2RenderingContextCustom.cpp:
        (WebCore::JSWebGL2RenderingContext::getIndexedParameter):
        * bindings/js/JSWebGLRenderingContextBaseCustom.cpp:
        (WebCore::getObjectParameter):
        (WebCore::JSWebGLRenderingContextBase::getExtension):
        (WebCore::JSWebGLRenderingContextBase::getFramebufferAttachmentParameter):
        (WebCore::JSWebGLRenderingContextBase::getParameter):
        (WebCore::JSWebGLRenderingContextBase::getProgramParameter):
        (WebCore::JSWebGLRenderingContextBase::getShaderParameter):
        (WebCore::toVector):
        (WebCore::dataFunctionf):
        (WebCore::dataFunctionMatrix):
        * bindings/js/JSWebKitSubtleCryptoCustom.cpp:
        (WebCore::cryptoKeyFormatFromJSValue):
        (WebCore::cryptoKeyUsagesFromJSValue):
        (WebCore::JSWebKitSubtleCrypto::generateKey):
        (WebCore::importKey):
        (WebCore::JSWebKitSubtleCrypto::importKey):
        (WebCore::exportKey):
        (WebCore::JSWebKitSubtleCrypto::exportKey):
        (WebCore::JSWebKitSubtleCrypto::unwrapKey):
        * bindings/js/JSWorkerCustom.cpp:
        (WebCore::constructJSWorker):
        * bindings/js/JSWorkerGlobalScopeCustom.cpp:
        (WebCore::JSWorkerGlobalScope::importScripts):
        (WebCore::JSWorkerGlobalScope::setTimeout):
        (WebCore::JSWorkerGlobalScope::setInterval):
        * bindings/js/ReadableStreamDefaultController.cpp:
        (WebCore::ReadableStreamDefaultController::invoke):
        * bindings/js/ScheduledAction.cpp:
        (WebCore::ScheduledAction::create):
        * bindings/scripts/CodeGeneratorJS.pm:
        (GenerateDictionaryImplementationContent):
        (GenerateImplementation):
        (GenerateParametersCheck):
        (GenerateImplementationFunctionCall):
        (GenerateConstructorDefinition):
        * html/HTMLMediaElement.cpp:
        (WebCore::controllerJSValue):
        (WebCore::HTMLMediaElement::updateMediaControlsAfterPresentationModeChange):
        (WebCore::HTMLMediaElement::getCurrentMediaControlsStatus):

2016-09-26  Michael Catanzaro  <mcatanzaro@igalia.com>

        -Wtautological-compare triggered in URLParser::internalValuesConsistent
        https://bugs.webkit.org/show_bug.cgi?id=162551

        Reviewed by Alex Christensen.

        Fix logic error.

        * platform/URLParser.cpp:
        (WebCore::URLParser::internalValuesConsistent):

2016-09-26  Michael Catanzaro  <mcatanzaro@igalia.com>

        Add CairoUniquePtr and use it in FontPlatformDataFreetype.cpp
        https://bugs.webkit.org/show_bug.cgi?id=162557

        Reviewed by Alex Christensen.

        * platform/graphics/cairo/CairoUniquePtr.h: Added.
        (WebCore::CairoPtrDeleter<cairo_font_options_t>::operator()):
        * platform/graphics/freetype/FontPlatformDataFreeType.cpp:
        (WebCore::getDefaultCairoFontOptions): Return a smart pointer.
        (WebCore::FontPlatformData::buildScaledFont): Use smart pointer.

2016-09-26  Michael Catanzaro  <mcatanzaro@igalia.com>

        Silence unused parameter warnings from Geoclue2Interface.c
        https://bugs.webkit.org/show_bug.cgi?id=162545

        Reviewed by Carlos Garcia Campos.

        * PlatformGTK.cmake:

2016-09-26  Michael Catanzaro  <mcatanzaro@igalia.com>

        std::unique_ptr deleter functions should not check if pointer is null
        https://bugs.webkit.org/show_bug.cgi?id=162558

        Reviewed by Alex Christensen.

        std::unique_ptr already does this before calling the deleter.

        * platform/graphics/x11/XUniquePtr.h:
        (WebCore::XPtrDeleter::operator()):
        (WebCore::XPtrDeleter<XImage>::operator()):
        (WebCore::XPtrDeleter<_XGC>::operator()):
        (WebCore::XPtrDeleter<__GLXcontextRec>::operator()):

2016-09-26  Per Arne Vollan  <pvollan@apple.com>

        [Win][Debug] Compile fix.
        https://bugs.webkit.org/show_bug.cgi?id=162550

        Reviewed by Alex Christensen.

        Windows headers need the FragmentForwardIterator '==' operator in debug mode.

        * rendering/SimpleLineLayout.cpp:
        (WebCore::SimpleLineLayout::FragmentForwardIterator::operator==):

2016-09-26  Michael Catanzaro  <mcatanzaro@igalia.com>

        [GTK] Unnecessary extern functions in FontPlatformDataFreeType.cpp
        https://bugs.webkit.org/show_bug.cgi?id=162555

        Reviewed by Carlos Garcia Campos.

        These functions should be file-static.

        * platform/graphics/freetype/FontPlatformDataFreeType.cpp:
        (WebCore::convertFontConfigSubpixelOrder):
        (WebCore::convertFontConfigHintStyle):
        (WebCore::setCairoFontOptionsFromFontConfigPattern):

== Rolled over to ChangeLog-2016-09-26 ==
