Checking pause locations when stepping in, out, and over if/else control flow.


== Running test suite: Debugger.stepping.control-flow
-- Running test case: Debugger.stepping.IfSingleStatement
EXPRESSION: setTimeout(entryIfSingleStatement)
STEPS: over, over, over, over, resume
PAUSED (debugger-statement)
PAUSE AT entryIfSingleStatement:16:5
     12    }
     13    
     14    function entryIfSingleStatement() {
 ->  15        |debugger;
     16        if (true)
     17            a();
     18        if (false)

ACTION: step-over
PAUSE AT entryIfSingleStatement:17:9
     13    
     14    function entryIfSingleStatement() {
     15        debugger;
 ->  16        if (|true)
     17            a();
     18        if (false)
     19            a();

ACTION: step-over
PAUSE AT entryIfSingleStatement:18:9
     14    function entryIfSingleStatement() {
     15        debugger;
     16        if (true)
 ->  17            |a();
     18        if (false)
     19            a();
     20    }

ACTION: step-over
PAUSE AT entryIfSingleStatement:19:9
     15        debugger;
     16        if (true)
     17            a();
 ->  18        if (|false)
     19            a();
     20    }
     21    

ACTION: step-over
PAUSE AT entryIfSingleStatement:21:2
     17            a();
     18        if (false)
     19            a();
 ->  20    }|
     21    
     22    function entryIfMultiStatement() {
     23        debugger;

ACTION: resume
RESUMED
PASS: Should have used all steps.

-- Running test case: Debugger.stepping.IfMultiStatement
EXPRESSION: setTimeout(entryIfMultiStatement)
STEPS: over, over, over, over, over, resume
PAUSED (debugger-statement)
PAUSE AT entryIfMultiStatement:24:5
     20    }
     21    
     22    function entryIfMultiStatement() {
 ->  23        |debugger;
     24        if (true) {
     25            a();
     26            a();

ACTION: step-over
PAUSE AT entryIfMultiStatement:25:9
     21    
     22    function entryIfMultiStatement() {
     23        debugger;
 ->  24        if (|true) {
     25            a();
     26            a();
     27        }

ACTION: step-over
PAUSE AT entryIfMultiStatement:26:9
     22    function entryIfMultiStatement() {
     23        debugger;
     24        if (true) {
 ->  25            |a();
     26            a();
     27        }
     28        if (false) {

ACTION: step-over
PAUSE AT entryIfMultiStatement:27:9
     23        debugger;
     24        if (true) {
     25            a();
 ->  26            |a();
     27        }
     28        if (false) {
     29            a();

ACTION: step-over
PAUSE AT entryIfMultiStatement:29:9
     25            a();
     26            a();
     27        }
 ->  28        if (|false) {
     29            a();
     30            a();
     31        }

ACTION: step-over
PAUSE AT entryIfMultiStatement:33:2
     29            a();
     30            a();
     31        }
 ->  32    }|
     33    
     34    function entryIfElse() {
     35        debugger;

ACTION: resume
RESUMED
PASS: Should have used all steps.

-- Running test case: Debugger.stepping.IfElse1
EXPRESSION: setTimeout(entryIfElse)
STEPS: over, over, over, over, over, resume
PAUSED (debugger-statement)
PAUSE AT entryIfElse:36:5
     32    }
     33    
     34    function entryIfElse() {
 ->  35        |debugger;
     36        if (true)
     37            a();
     38        else

ACTION: step-over
PAUSE AT entryIfElse:37:9
     33    
     34    function entryIfElse() {
     35        debugger;
 ->  36        if (|true)
     37            a();
     38        else
     39            a();

ACTION: step-over
PAUSE AT entryIfElse:38:9
     34    function entryIfElse() {
     35        debugger;
     36        if (true)
 ->  37            |a();
     38        else
     39            a();
     40        if (false)

ACTION: step-over
PAUSE AT entryIfElse:41:9
     37            a();
     38        else
     39            a();
 ->  40        if (|false)
     41            a();
     42        else
     43            a();

ACTION: step-over
PAUSE AT entryIfElse:44:9
     40        if (false)
     41            a();
     42        else
 ->  43            |a();
     44    }
     45    
     46    function entryIfElseChain() {

ACTION: step-over
PAUSE AT entryIfElse:45:2
     41            a();
     42        else
     43            a();
 ->  44    }|
     45    
     46    function entryIfElseChain() {
     47        debugger;

ACTION: resume
RESUMED
PASS: Should have used all steps.

-- Running test case: Debugger.stepping.IfElse2
EXPRESSION: setTimeout(entryIfElseChain)
STEPS: over, over, over, over, over, over, over, resume
PAUSED (debugger-statement)
PAUSE AT entryIfElseChain:48:5
     44    }
     45    
     46    function entryIfElseChain() {
 ->  47        |debugger;
     48        if (false)
     49            a();
     50        else if (true)

ACTION: step-over
PAUSE AT entryIfElseChain:49:9
     45    
     46    function entryIfElseChain() {
     47        debugger;
 ->  48        if (|false)
     49            a();
     50        else if (true)
     51            a();

ACTION: step-over
PAUSE AT entryIfElseChain:51:14
     47        debugger;
     48        if (false)
     49            a();
 ->  50        else if (|true)
     51            a();
     52        else
     53            a();

ACTION: step-over
PAUSE AT entryIfElseChain:52:9
     48        if (false)
     49            a();
     50        else if (true)
 ->  51            |a();
     52        else
     53            a();
     54    

ACTION: step-over
PAUSE AT entryIfElseChain:56:9
     52        else
     53            a();
     54    
 ->  55        if (|false)
     56            a();
     57        else if (false)
     58            a();

ACTION: step-over
PAUSE AT entryIfElseChain:58:14
     54    
     55        if (false)
     56            a();
 ->  57        else if (|false)
     58            a();
     59        else
     60            a();

ACTION: step-over
PAUSE AT entryIfElseChain:61:9
     57        else if (false)
     58            a();
     59        else
 ->  60            |a();
     61    }
     62    
     63    function entryIfWithCall() {

ACTION: step-over
PAUSE AT entryIfElseChain:62:2
     58            a();
     59        else
     60            a();
 ->  61    }|
     62    
     63    function entryIfWithCall() {
     64        debugger;

ACTION: resume
RESUMED
PASS: Should have used all steps.

-- Running test case: Debugger.stepping.IfWithCall1
EXPRESSION: setTimeout(entryIfWithCall)
STEPS: over, over, over, resume
PAUSED (debugger-statement)
PAUSE AT entryIfWithCall:65:5
     61    }
     62    
     63    function entryIfWithCall() {
 ->  64        |debugger;
     65        if (a() && a())
     66            a();
     67    }

ACTION: step-over
PAUSE AT entryIfWithCall:66:9
     62    
     63    function entryIfWithCall() {
     64        debugger;
 ->  65        if (|a() && a())
     66            a();
     67    }
     68    

ACTION: step-over
PAUSE AT entryIfWithCall:67:9
     63    function entryIfWithCall() {
     64        debugger;
     65        if (a() && a())
 ->  66            |a();
     67    }
     68    
     69    function entryTernary() {

ACTION: step-over
PAUSE AT entryIfWithCall:68:2
     64        debugger;
     65        if (a() && a())
     66            a();
 ->  67    }|
     68    
     69    function entryTernary() {
     70        let t = () => true;

ACTION: resume
RESUMED
PASS: Should have used all steps.

-- Running test case: Debugger.stepping.IfWithCall2
EXPRESSION: setTimeout(entryIfWithCall)
STEPS: over, in, out, in, out, over, resume
PAUSED (debugger-statement)
PAUSE AT entryIfWithCall:65:5
     61    }
     62    
     63    function entryIfWithCall() {
 ->  64        |debugger;
     65        if (a() && a())
     66            a();
     67    }

ACTION: step-over
PAUSE AT entryIfWithCall:66:9
     62    
     63    function entryIfWithCall() {
     64        debugger;
 ->  65        if (|a() && a())
     66            a();
     67    }
     68    

ACTION: step-in
PAUSE AT a:8:5
      4    <script src="../resources/log-pause-location.js"></script>
      5    <script>
      6    function a() {
 ->   7        |return 1;
      8    }
      9    
     10    function b() {

ACTION: step-out
PAUSE AT entryIfWithCall:66:16
     62    
     63    function entryIfWithCall() {
     64        debugger;
 ->  65        if (a() && |a())
     66            a();
     67    }
     68    

ACTION: step-in
PAUSE AT a:8:5
      4    <script src="../resources/log-pause-location.js"></script>
      5    <script>
      6    function a() {
 ->   7        |return 1;
      8    }
      9    
     10    function b() {

ACTION: step-out
PAUSE AT entryIfWithCall:67:9
     63    function entryIfWithCall() {
     64        debugger;
     65        if (a() && a())
 ->  66            |a();
     67    }
     68    
     69    function entryTernary() {

ACTION: step-over
PAUSE AT entryIfWithCall:68:2
     64        debugger;
     65        if (a() && a())
     66            a();
 ->  67    }|
     68    
     69    function entryTernary() {
     70        let t = () => true;

ACTION: resume
RESUMED
PASS: Should have used all steps.

-- Running test case: Debugger.stepping.TernaryStepOver
EXPRESSION: setTimeout(entryTernary)
STEPS: over, over, over, resume
PAUSED (debugger-statement)
PAUSE AT entryTernary:73:5
     69    function entryTernary() {
     70        let t = () => true;
     71        let f = () => false;
 ->  72        |debugger;
     73        let x = t() ? a() : b();
     74        let y = f() ? a() : b();
     75    }

ACTION: step-over
PAUSE AT entryTernary:74:5
     70        let t = () => true;
     71        let f = () => false;
     72        debugger;
 ->  73        |let x = t() ? a() : b();
     74        let y = f() ? a() : b();
     75    }
     76    

ACTION: step-over
PAUSE AT entryTernary:75:5
     71        let f = () => false;
     72        debugger;
     73        let x = t() ? a() : b();
 ->  74        |let y = f() ? a() : b();
     75    }
     76    
     77    // ---------

ACTION: step-over
PAUSE AT entryTernary:76:2
     72        debugger;
     73        let x = t() ? a() : b();
     74        let y = f() ? a() : b();
 ->  75    }|
     76    
     77    // ---------
     78    

ACTION: resume
RESUMED
PASS: Should have used all steps.

-- Running test case: Debugger.stepping.TernaryStepIn
EXPRESSION: setTimeout(entryTernary)
STEPS: over, in, out, in, out, in, out, in, out, resume
PAUSED (debugger-statement)
PAUSE AT entryTernary:73:5
     69    function entryTernary() {
     70        let t = () => true;
     71        let f = () => false;
 ->  72        |debugger;
     73        let x = t() ? a() : b();
     74        let y = f() ? a() : b();
     75    }

ACTION: step-over
PAUSE AT entryTernary:74:5
     70        let t = () => true;
     71        let f = () => false;
     72        debugger;
 ->  73        |let x = t() ? a() : b();
     74        let y = f() ? a() : b();
     75    }
     76    

ACTION: step-in
PAUSE AT t:71:19
     67    }
     68    
     69    function entryTernary() {
 ->  70        let t = () => |true;
     71        let f = () => false;
     72        debugger;
     73        let x = t() ? a() : b();

ACTION: step-out
PAUSE AT entryTernary:74:19
     70        let t = () => true;
     71        let f = () => false;
     72        debugger;
 ->  73        let x = t() ? |a() : b();
     74        let y = f() ? a() : b();
     75    }
     76    

ACTION: step-in
PAUSE AT a:8:5
      4    <script src="../resources/log-pause-location.js"></script>
      5    <script>
      6    function a() {
 ->   7        |return 1;
      8    }
      9    
     10    function b() {

ACTION: step-out
PAUSE AT entryTernary:75:5
     71        let f = () => false;
     72        debugger;
     73        let x = t() ? a() : b();
 ->  74        |let y = f() ? a() : b();
     75    }
     76    
     77    // ---------

ACTION: step-in
PAUSE AT f:72:19
     68    
     69    function entryTernary() {
     70        let t = () => true;
 ->  71        let f = () => |false;
     72        debugger;
     73        let x = t() ? a() : b();
     74        let y = f() ? a() : b();

ACTION: step-out
PAUSE AT entryTernary:75:25
     71        let f = () => false;
     72        debugger;
     73        let x = t() ? a() : b();
 ->  74        let y = f() ? a() : |b();
     75    }
     76    
     77    // ---------

ACTION: step-in
PAUSE AT b:12:5
      8    }
      9    
     10    function b() {
 ->  11        |return 2;
     12    }
     13    
     14    function entryIfSingleStatement() {

ACTION: step-out
PAUSE AT entryTernary:76:2
     72        debugger;
     73        let x = t() ? a() : b();
     74        let y = f() ? a() : b();
 ->  75    }|
     76    
     77    // ---------
     78    

ACTION: resume
RESUMED
PASS: Should have used all steps.

